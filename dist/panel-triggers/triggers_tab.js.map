{"version":3,"sources":["../../src/panel-triggers/triggers_tab.js"],"names":["triggerPanelTriggersTab","restrict","scope","templateUrl","controller","TriggersTabCtrl","_","utils","DEFAULT_TARGET","$scope","$rootScope","uiSegmentSrv","templateSrv","editor","panelCtrl","ctrl","panel","datasources","scopeDefaults","getGroupNames","getHostNames","getApplicationNames","oldTarget","cloneDeep","targets","defaultsDeep","initDatasources","refresh","then","each","datasource","bindSuggestionFunctions","ds","name","bind","suggestGroups","suggestHosts","suggestApps","query","callback","zabbix","getAllGroups","map","groups","groupFilter","replaceTemplateVars","group","filter","getAllHosts","hosts","hostFilter","host","getAllApps","apps","parseTarget","newTarget","isEqual","str","isRegex","isTemplateVariable","variables"],"mappings":"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","file":"triggers_tab.js","sourcesContent":["import _ from 'lodash';\r\nimport * as utils from '../datasource-zabbix/utils';\r\nimport {DEFAULT_TARGET} from './triggers_panel_ctrl';\r\n\r\nclass TriggersTabCtrl {\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $rootScope, uiSegmentSrv, templateSrv) {\r\n    $scope.editor = this;\r\n    this.panelCtrl = $scope.ctrl;\r\n    this.panel = this.panelCtrl.panel;\r\n    this.templateSrv = templateSrv;\r\n    this.datasources = this.panelCtrl.datasources;\r\n\r\n    // Load scope defaults\r\n    var scopeDefaults = {\r\n      getGroupNames: {},\r\n      getHostNames: {},\r\n      getApplicationNames: {},\r\n      oldTarget: _.cloneDeep(this.panel.targets)\r\n    };\r\n    _.defaultsDeep(this, scopeDefaults);\r\n\r\n    this.initDatasources();\r\n    this.panelCtrl.refresh();\r\n  }\r\n\r\n  initDatasources() {\r\n    return this.panelCtrl.initDatasources()\r\n    .then((datasources) => {\r\n      _.each(datasources, (datasource) => {\r\n        this.bindSuggestionFunctions(datasource);\r\n      });\r\n    });\r\n  }\r\n\r\n  bindSuggestionFunctions(datasource) {\r\n    // Map functions for bs-typeahead\r\n    let ds = datasource.name;\r\n    this.getGroupNames[ds] = _.bind(this.suggestGroups, this, datasource);\r\n    this.getHostNames[ds] = _.bind(this.suggestHosts, this, datasource);\r\n    this.getApplicationNames[ds] = _.bind(this.suggestApps, this, datasource);\r\n  }\r\n\r\n  suggestGroups(datasource, query, callback) {\r\n    return datasource.zabbix.getAllGroups()\r\n    .then(groups => {\r\n      return _.map(groups, 'name');\r\n    })\r\n    .then(callback);\r\n  }\r\n\r\n  suggestHosts(datasource, query, callback) {\r\n    let groupFilter = datasource.replaceTemplateVars(this.panel.targets[datasource.name].group.filter);\r\n    return datasource.zabbix.getAllHosts(groupFilter)\r\n    .then(hosts => {\r\n      return _.map(hosts, 'name');\r\n    })\r\n    .then(callback);\r\n  }\r\n\r\n  suggestApps(datasource, query, callback) {\r\n    let groupFilter = datasource.replaceTemplateVars(this.panel.targets[datasource.name].group.filter);\r\n    let hostFilter = datasource.replaceTemplateVars(this.panel.targets[datasource.name].host.filter);\r\n    return datasource.zabbix.getAllApps(groupFilter, hostFilter)\r\n    .then(apps => {\r\n      return _.map(apps, 'name');\r\n    })\r\n    .then(callback);\r\n  }\r\n\r\n  datasourcesChanged() {\r\n    _.each(this.panel.datasources, (ds) => {\r\n      if (!this.panel.targets[ds]) {\r\n        this.panel.targets[ds] = _.cloneDeep(DEFAULT_TARGET);\r\n      }\r\n    });\r\n    this.parseTarget();\r\n  }\r\n\r\n  parseTarget() {\r\n    this.initDatasources()\r\n    .then(() => {\r\n      var newTarget = _.cloneDeep(this.panel.targets);\r\n      if (!_.isEqual(this.oldTarget, newTarget)) {\r\n        this.oldTarget = newTarget;\r\n      }\r\n      this.panelCtrl.refresh();\r\n    });\r\n  }\r\n\r\n  isRegex(str) {\r\n    return utils.isRegex(str);\r\n  }\r\n\r\n  isVariable(str) {\r\n    return utils.isTemplateVariable(str, this.templateSrv.variables);\r\n  }\r\n}\r\n\r\nexport function triggerPanelTriggersTab() {\r\n  return {\r\n    restrict: 'E',\r\n    scope: true,\r\n    templateUrl: 'public/plugins/hzmc-onekeeper-app/panel-triggers/partials/triggers_tab.html',\r\n    controller: TriggersTabCtrl,\r\n  };\r\n}\r\n"]}