{"version":3,"sources":["../../src/panel-triggers/editor.js"],"names":["getMetricNames","scope","metricList","_","uniq","map","metric","triggerPanelEditor","restrict","templateUrl","controller","TriggerPanelEditorCtrl","utils","$scope","$rootScope","uiSegmentSrv","datasourceSrv","templateSrv","popoverSrv","editor","panelCtrl","ctrl","panel","getGroupNames","partial","getHostNames","getApplicationNames","$on","onVariableChange","fontSizes","ackFilters","sortByFields","text","value","showEventsFields","scopeDefaults","inputStyles","oldTarget","cloneDeep","triggers","defaults","datasources","getZabbixDataSources","datasource","get","then","zabbix","queryBuilder","initFilters","refresh","Promise","all","suggestGroups","suggestHosts","suggestApps","getAllGroups","groupList","groups","groupFilter","replaceTemplateVars","group","filter","getAllHosts","hostList","hosts","hostFilter","host","getAllApps","appList","apps","isContainsVariables","targetChanged","some","isTemplateVariable","field","variables","newTarget","isEqual","each","triggerList","trigger","color","triggerSeverity","priority","severity","refreshTriggerSeverity","str","isRegex","ZABBIX_DS_ID","getMetricSources","meta","id"],"mappings":"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","file":"editor.js","sourcesContent":["/**\r\n * Grafana-Zabbix\r\n * Zabbix plugin for Grafana.\r\n * http://github.com/alexanderzobnin/grafana-zabbix\r\n *\r\n * Trigger panel.\r\n * This feature sponsored by CORE IT\r\n * http://www.coreit.fr\r\n *\r\n * Copyright 2015 Alexander Zobnin alexanderzobnin@gmail.com\r\n * Licensed under the Apache License, Version 2.0\r\n */\r\n\r\nimport _ from 'lodash';\r\nimport * as utils from '../datasource-zabbix/utils';\r\n\r\nimport '../datasource-zabbix/css/query-editor.css!';\r\n\r\nclass TriggerPanelEditorCtrl {\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $rootScope, uiSegmentSrv, datasourceSrv, templateSrv, popoverSrv) {\r\n    $scope.editor = this;\r\n    this.panelCtrl = $scope.ctrl;\r\n    this.panel = this.panelCtrl.panel;\r\n\r\n    this.datasourceSrv = datasourceSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.popoverSrv = popoverSrv;\r\n\r\n    // Map functions for bs-typeahead\r\n    this.getGroupNames = _.partial(getMetricNames, this, 'groupList');\r\n    this.getHostNames = _.partial(getMetricNames, this, 'hostList');\r\n    this.getApplicationNames = _.partial(getMetricNames, this, 'appList');\r\n\r\n    // Update metric suggestion when template variable was changed\r\n    $rootScope.$on('template-variable-value-updated', () => this.onVariableChange());\r\n\r\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\r\n    this.ackFilters = [\r\n      'all triggers',\r\n      'unacknowledged',\r\n      'acknowledged'\r\n    ];\r\n    this.sortByFields = [\r\n      { text: 'last change',  value: 'lastchange' },\r\n      { text: 'severity',     value: 'priority' }\r\n    ];\r\n    this.showEventsFields = [\r\n      { text: 'All',     value: [0,1] },\r\n      { text: 'OK',      value: [0] },\r\n      { text: 'Problems', value: 1 }\r\n    ];\r\n\r\n    // Load scope defaults\r\n    var scopeDefaults = {\r\n      metric: {},\r\n      inputStyles: {},\r\n      oldTarget: _.cloneDeep(this.panel.triggers)\r\n    };\r\n    _.defaults(this, scopeDefaults);\r\n\r\n    // Set default datasource\r\n    this.datasources = _.map(this.getZabbixDataSources(), 'name');\r\n    if (!this.panel.datasource) {\r\n      this.panel.datasource = this.datasources[0];\r\n    }\r\n    // Load datasource\r\n    this.datasourceSrv.get(this.panel.datasource)\r\n    .then(datasource => {\r\n      this.datasource = datasource;\r\n      this.zabbix = datasource.zabbix;\r\n      this.queryBuilder = datasource.queryBuilder;\r\n      this.initFilters();\r\n      this.panelCtrl.refresh();\r\n    });\r\n  }\r\n\r\n  initFilters() {\r\n    return Promise.all([\r\n      this.suggestGroups(),\r\n      this.suggestHosts(),\r\n      this.suggestApps()\r\n    ]);\r\n  }\r\n\r\n  suggestGroups() {\r\n    return this.zabbix.getAllGroups()\r\n    .then(groups => {\r\n      this.metric.groupList = groups;\r\n      return groups;\r\n    });\r\n  }\r\n\r\n  suggestHosts() {\r\n    let groupFilter = this.datasource.replaceTemplateVars(this.panel.triggers.group.filter);\r\n    return this.zabbix.getAllHosts(groupFilter)\r\n    .then(hosts => {\r\n      this.metric.hostList = hosts;\r\n      return hosts;\r\n    });\r\n  }\r\n\r\n  suggestApps() {\r\n    let groupFilter = this.datasource.replaceTemplateVars(this.panel.triggers.group.filter);\r\n    let hostFilter = this.datasource.replaceTemplateVars(this.panel.triggers.host.filter);\r\n    return this.zabbix.getAllApps(groupFilter, hostFilter)\r\n    .then(apps => {\r\n      this.metric.appList = apps;\r\n      return apps;\r\n    });\r\n  }\r\n\r\n  onVariableChange() {\r\n    if (this.isContainsVariables()) {\r\n      this.targetChanged();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check query for template variables\r\n   */\r\n  isContainsVariables() {\r\n    return _.some(['group', 'host', 'application'], field => {\r\n      return utils.isTemplateVariable(this.panel.triggers[field].filter, this.templateSrv.variables);\r\n    });\r\n  }\r\n\r\n  targetChanged() {\r\n    this.initFilters();\r\n    this.panelCtrl.refresh();\r\n  }\r\n\r\n  parseTarget() {\r\n    this.initFilters();\r\n    var newTarget = _.cloneDeep(this.panel.triggers);\r\n    if (!_.isEqual(this.oldTarget, this.panel.triggers)) {\r\n      this.oldTarget = newTarget;\r\n      this.panelCtrl.refresh();\r\n    }\r\n  }\r\n\r\n  refreshTriggerSeverity() {\r\n    _.each(this.triggerList, function(trigger) {\r\n      trigger.color = this.panel.triggerSeverity[trigger.priority].color;\r\n      trigger.severity = this.panel.triggerSeverity[trigger.priority].severity;\r\n    });\r\n    this.panelCtrl.refresh();\r\n  }\r\n\r\n  datasourceChanged() {\r\n    this.panelCtrl.refresh();\r\n  }\r\n\r\n  changeTriggerSeverityColor(trigger, color) {\r\n    this.panel.triggerSeverity[trigger.priority].color = color;\r\n    this.refreshTriggerSeverity();\r\n  }\r\n\r\n  isRegex(str) {\r\n    return utils.isRegex(str);\r\n  }\r\n\r\n  isVariable(str) {\r\n    return utils.isTemplateVariable(str, this.templateSrv.variables);\r\n  }\r\n\r\n  getZabbixDataSources() {\r\n    let ZABBIX_DS_ID = 'hzmc-onekeeper-datasource';\r\n    return _.filter(this.datasourceSrv.getMetricSources(), datasource => {\r\n      return datasource.meta.id === ZABBIX_DS_ID && datasource.value;\r\n    });\r\n  }\r\n}\r\n\r\n// Get list of metric names for bs-typeahead directive\r\nfunction getMetricNames(scope, metricList) {\r\n  return _.uniq(_.map(scope.metric[metricList], 'name'));\r\n}\r\n\r\nexport function triggerPanelEditor() {\r\n  return {\r\n    restrict: 'E',\r\n    scope: true,\r\n    templateUrl: 'public/plugins/hzmc-onekeeper-app/panel-triggers/editor.html',\r\n    controller: TriggerPanelEditorCtrl,\r\n  };\r\n}\r\n"]}