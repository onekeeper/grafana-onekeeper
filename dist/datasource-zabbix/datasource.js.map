{"version":3,"sources":["../../src/datasource-zabbix/datasource.js"],"names":["bindFunctionDefs","functionDefs","category","aggregationFunctions","_","map","metricFunctions","getCategories","aggFuncDefs","filter","func","includes","def","name","funcInstance","createFuncInstance","params","bindFunction","dataProcessor","getConsolidateBy","target","consolidateBy","funcDef","find","functions","length","downsampleSeries","timeseries_data","options","defaultAgg","consolidateByFunc","timeseries","datapoints","maxDataPoints","groupBy","interval","formatMetric","metricObj","text","expandable","zabbixTemplateFormat","value","utils","escapeRegex","escapedValues","join","zabbixItemIdsTemplateFormat","replaceTemplateVars","templateSrv","scopedVars","replacedTarget","replace","isRegex","sequence","funcsArray","result","i","call","filterEnabledTargets","targets","hide","group","host","item","getTriggerThreshold","expression","thresholdPattern","finded_thresholds","match","threshold","Number","dateMath","migrations","c","responseHandler","ZabbixAPIError","ZabbixAPIDatasource","instanceSettings","alertSrv","dashboardSrv","zabbixAlertingSrv","Zabbix","partial","url","basicAuth","withCredentials","username","jsonData","password","trends","trendsFrom","trendsRange","ttl","cacheTTL","parseInterval","alertingEnabled","alerting","addThresholds","alertingMinSeverity","SEV_WARNING","dbConnectionOptions","dbConnection","enableDirectDBConnection","enable","sqlDatasourceId","datasourceId","zabbixOptions","zabbix","alertQuery","then","setPanelAlertState","panelId","alert","state","removeZabbixThreshold","forEach","thresholds","setPanelThreshold","promises","t","timeFrom","Math","ceil","parse","range","from","timeTo","to","cloneDeep","replaceTargetVariables","timeFunctions","time_from","time_to","timeRange","useTrends","isUseTrends","mode","MODE_METRICS","MODE_TEXT","MODE_ITEMID","migrate","queryNumericData","queryTextData","queryItemIdData","MODE_ITSERVICE","queryITServiceData","Promise","all","flatten","data","getItemOptions","itemtype","getItemsFromTarget","queryNumericDataForItems","items","getHistoryPromise","getTrendsDB","dbConnector","handleGrafanaTSResponse","history","valueType","getTrendValueType","getTrend","handleTrends","series","sortBy","point","DATAPOINT_TS","getHistoryDB","getHistory","handleHistory","applyDataProcessingFunctions","catch","console","log","error","trendFunctions","trendValueFunc","transformFunctions","filterFunctions","aliasFunctions","dp","aggFuncNames","lastAgg","findLast","applyTimeShiftFunction","timeShiftFunc","shift","unShiftTimeSeries","handleText","resolve","itemids","split","itemid","trim","getItemsByIDs","itservice","itServiceFilter","slaProperty","itServiceIds","itServices","isOldVersion","getITServices","itservices","serviceid","getSLA","serviceids","handleSLAResponse","slaResponse","zabbixVersion","getVersion","version","login","testSQLDataSource","status","title","message","query","parts","each","splitTemplateQuery","part","push","template","zipObject","app","getItems","getApps","getHosts","getGroups","metrics","rangeRaw","annotation","showOkEvents","SHOW_ALL_EVENTS","SHOW_OK_EVENTS","triggersOptions","showTriggers","SHOW_ALL_TRIGGERS","hideHostsInMaintenance","getTriggers","application","triggerName","trigger","triggers","buildRegex","test","description","priority","minseverity","objectids","getEvents","indexedTriggers","keyBy","hideAcknowledged","events","event","acknowledges","tags","showHostname","hosts","formatted_acknowledges","formatAcknowledges","time","clock","objectid","enabled_targets","getPanelItems","results","getAlerts","firedTriggers","p","textFilter","param","toString","useTrendsFrom","useTrendsRange","contains","indexBy"],"mappings":";;;;;;;;;;;;;AA8lBA,WAASA,gBAAT,CAA0BC,YAA1B,EAAwCC,QAAxC,EAAkD;AAChD,QAAIC,uBAAuBC,EAAEC,GAAF,CAAMC,gBAAgBC,aAAhB,GAAgCL,QAAhC,CAAN,EAAiD,MAAjD,CAA3B;AACA,QAAIM,cAAcJ,EAAEK,MAAF,CAASR,YAAT,EAAuB,UAASS,IAAT,EAAe;AACtD,aAAON,EAAEO,QAAF,CAAWR,oBAAX,EAAiCO,KAAKE,GAAL,CAASC,IAA1C,CAAP;AACD,KAFiB,CAAlB;;AAIA,WAAOT,EAAEC,GAAF,CAAMG,WAAN,EAAmB,UAASE,IAAT,EAAe;AACvC,UAAII,eAAeR,gBAAgBS,kBAAhB,CAAmCL,KAAKE,GAAxC,EAA6CF,KAAKM,MAAlD,CAAnB;AACA,aAAOF,aAAaG,YAAb,CAA0BC,cAAcZ,eAAxC,CAAP;AACD,KAHM,CAAP;AAID;;AAED,WAASa,gBAAT,CAA0BC,MAA1B,EAAkC;AAChC,QAAIC,gBAAgB,KAApB;AACA,QAAIC,UAAUlB,EAAEmB,IAAF,CAAOH,OAAOI,SAAd,EAAyB,gBAAQ;AAC7C,aAAOd,KAAKE,GAAL,CAASC,IAAT,KAAkB,eAAzB;AACD,KAFa,CAAd;AAGA,QAAIS,WAAWA,QAAQN,MAAnB,IAA6BM,QAAQN,MAAR,CAAeS,MAAhD,EAAwD;AACtDJ,sBAAgBC,QAAQN,MAAR,CAAe,CAAf,CAAhB;AACD;AACD,WAAOK,aAAP;AACD;;AAED,WAASK,gBAAT,CAA0BC,eAA1B,EAA2CC,OAA3C,EAAoD;AAClD,QAAIC,aAAaX,cAAcf,oBAAd,CAAmC,KAAnC,CAAjB;AACA,QAAI2B,oBAAoBZ,cAAcf,oBAAd,CAAmCyB,QAAQP,aAA3C,KAA6DQ,UAArF;AACA,WAAOzB,EAAEC,GAAF,CAAMsB,eAAN,EAAuB,sBAAc;AAC1C,UAAII,WAAWC,UAAX,CAAsBP,MAAtB,GAA+BG,QAAQK,aAA3C,EAA0D;AACxDF,mBAAWC,UAAX,GAAwBd,cACrBgB,OADqB,CACbN,QAAQO,QADK,EACKL,iBADL,EACwBC,WAAWC,UADnC,CAAxB;AAED;AACD,aAAOD,UAAP;AACD,KANM,CAAP;AAOD;;AAED,WAASK,YAAT,CAAsBC,SAAtB,EAAiC;AAC/B,WAAO;AACLC,YAAMD,UAAUxB,IADX;AAEL0B,kBAAY;AAFP,KAAP;AAID;;AAED;;;;;;;;;;AAUA,WAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AACnC,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOC,MAAMC,WAAN,CAAkBF,KAAlB,CAAP;AACD;;AAED,QAAIG,gBAAgBxC,EAAEC,GAAF,CAAMoC,KAAN,EAAaC,MAAMC,WAAnB,CAApB;AACA,WAAO,MAAMC,cAAcC,IAAd,CAAmB,GAAnB,CAAN,GAAgC,GAAvC;AACD;;AAED,WAASC,2BAAT,CAAqCL,KAArC,EAA4C;AAC1C,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOA,KAAP;AACD;AACD,WAAOA,MAAMI,IAAN,CAAW,GAAX,CAAP;AACD;;AAED;;;;;;;;AAQA,WAASE,mBAAT,CAA6BC,WAA7B,EAA0C5B,MAA1C,EAAkD6B,UAAlD,EAA8D;AAC5D,QAAIC,iBAAiBF,YAAYG,OAAZ,CAAoB/B,MAApB,EAA4B6B,UAA5B,EAAwCT,oBAAxC,CAArB;AACA,QAAIpB,WAAW8B,cAAX,IAA6B,CAACR,MAAMU,OAAN,CAAcF,cAAd,CAAlC,EAAiE;AAC/DA,uBAAiB,OAAOA,cAAP,GAAwB,IAAzC;AACD;AACD,WAAOA,cAAP;AACD;;AAED;AACA;AACA,WAASG,QAAT,CAAkBC,UAAlB,EAA8B;AAC5B,WAAO,UAASC,MAAT,EAAiB;AACtB,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,WAAW7B,MAA/B,EAAuC+B,GAAvC,EAA4C;AAC1CD,iBAASD,WAAWE,CAAX,EAAcC,IAAd,CAAmB,IAAnB,EAAyBF,MAAzB,CAAT;AACD;AACD,aAAOA,MAAP;AACD,KALD;AAMD;;AAED,WAASG,oBAAT,CAA8BC,OAA9B,EAAuC;AACrC,WAAOvD,EAAEK,MAAF,CAASkD,OAAT,EAAkB,kBAAU;AACjC,aAAO,EAAEvC,OAAOwC,IAAP,IAAe,CAACxC,OAAOyC,KAAvB,IAAgC,CAACzC,OAAO0C,IAAxC,IAAgD,CAAC1C,OAAO2C,IAA1D,CAAP;AACD,KAFM,CAAP;AAGD;;AAED,WAASC,mBAAT,CAA6BC,UAA7B,EAAyC;AACvC,QAAIC,mBAAmB,iBAAvB;AACA,QAAIC,oBAAoBF,WAAWG,KAAX,CAAiBF,gBAAjB,CAAxB;AACA,QAAIC,qBAAqBA,kBAAkB1C,MAAlB,IAA4B,CAArD,EAAwD;AACtD,UAAI4C,YAAYF,kBAAkB,CAAlB,CAAhB;AACAE,kBAAYC,OAAOD,SAAP,CAAZ;AACA,aAAOA,SAAP;AACD,KAJD,MAIO;AACL,aAAO,IAAP;AACD;AACF;;;;AA7sBMjE,O;;AACKmE,c;;AACA7B,W;;AACA8B,gB;;AACAlE,qB;;AACAmE,O;;AACLvD,mB;;AACAwD,qB;;AAGCC,oB,2BAAAA,c;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCAEFC,mB;;AAEJ;AACA,qCAAYC,gBAAZ,EAA8B7B,WAA9B,EAA2C8B,QAA3C,EAAqDC,YAArD,EAAmEC,iBAAnE,EAAsFC,MAAtF,EAA8F;AAAA;;AAC5F,eAAKjC,WAAL,GAAmBA,WAAnB;AACA,eAAK8B,QAAL,GAAgBA,QAAhB;AACA,eAAKC,YAAL,GAAoBA,YAApB;AACA,eAAKC,iBAAL,GAAyBA,iBAAzB;;AAEA;AACA,eAAKjC,mBAAL,GAA2B3C,EAAE8E,OAAF,CAAUnC,mBAAV,EAA+B,KAAKC,WAApC,CAA3B;;AAEA;AACA,eAAKnC,IAAL,GAAwBgE,iBAAiBhE,IAAzC;AACA,eAAKsE,GAAL,GAAwBN,iBAAiBM,GAAzC;AACA,eAAKC,SAAL,GAAwBP,iBAAiBO,SAAzC;AACA,eAAKC,eAAL,GAAwBR,iBAAiBQ,eAAzC;;AAEA;AACA,eAAKC,QAAL,GAAwBT,iBAAiBU,QAAjB,CAA0BD,QAAlD;AACA,eAAKE,QAAL,GAAwBX,iBAAiBU,QAAjB,CAA0BC,QAAlD;;AAEA;AACA,eAAKC,MAAL,GAAwBZ,iBAAiBU,QAAjB,CAA0BE,MAAlD;AACA,eAAKC,UAAL,GAAwBb,iBAAiBU,QAAjB,CAA0BG,UAA1B,IAAwC,IAAhE;AACA,eAAKC,WAAL,GAAwBd,iBAAiBU,QAAjB,CAA0BI,WAA1B,IAAyC,IAAjE;;AAEA;AACA,cAAIC,MAAMf,iBAAiBU,QAAjB,CAA0BM,QAA1B,IAAsC,IAAhD;AACA,eAAKA,QAAL,GAAgBnD,MAAMoD,aAAN,CAAoBF,GAApB,CAAhB;;AAEA;AACA,eAAKG,eAAL,GAAuBlB,iBAAiBU,QAAjB,CAA0BS,QAAjD;AACA,eAAKC,aAAL,GAAqBpB,iBAAiBU,QAAjB,CAA0BU,aAA/C;AACA,eAAKC,mBAAL,GAA2BrB,iBAAiBU,QAAjB,CAA0BW,mBAA1B,IAAiDzB,EAAE0B,WAA9E;;AAEA;AACA,cAAIC,sBAAsBvB,iBAAiBU,QAAjB,CAA0Bc,YAA1B,IAA0C,EAApE;AACA,eAAKC,wBAAL,GAAgCF,oBAAoBG,MAApD;AACA,eAAKC,eAAL,GAAuBJ,oBAAoBK,YAA3C;;AAEA,cAAIC,gBAAgB;AAClBpB,sBAAU,KAAKA,QADG;AAElBE,sBAAU,KAAKA,QAFG;AAGlBJ,uBAAW,KAAKA,SAHE;AAIlBC,6BAAiB,KAAKA,eAJJ;AAKlBQ,sBAAU,KAAKA,QALG;AAMlBS,sCAA0B,KAAKA,wBANb;AAOlBE,6BAAiB,KAAKA;AAPJ,WAApB;;AAUA,eAAKG,MAAL,GAAc,IAAI1B,MAAJ,CAAW,KAAKE,GAAhB,EAAqBuB,aAArB,CAAd;AACD;;AAED;AACA;AACA;;AAEA;;;;;;;;;gCAKM9E,O,EAAS;AAAA;;AACb;AACA,gBAAI,KAAKmE,eAAT,EAA0B;AACxB,mBAAKa,UAAL,CAAgBhF,OAAhB,EAAyBiF,IAAzB,CAA8B,iBAAS;AACrC,sBAAK7B,iBAAL,CAAuB8B,kBAAvB,CAA0ClF,QAAQmF,OAAlD,EAA2DC,MAAMC,KAAjE;;AAEA,sBAAKjC,iBAAL,CAAuBkC,qBAAvB,CAA6CtF,QAAQmF,OAArD;AACA,oBAAI,MAAKd,aAAT,EAAwB;AACtB7F,oBAAE+G,OAAF,CAAUH,MAAMI,UAAhB,EAA4B,qBAAa;AACvC,0BAAKpC,iBAAL,CAAuBqC,iBAAvB,CAAyCzF,QAAQmF,OAAjD,EAA0D1C,SAA1D;AACD,mBAFD;AAGD;AACF,eATD;AAUD;;AAED;AACA,gBAAIiD,WAAWlH,EAAEC,GAAF,CAAMuB,QAAQ+B,OAAd,EAAuB,aAAK;AACzC;AACA,kBAAI4D,EAAE3D,IAAN,EAAY;AACV,uBAAO,EAAP;AACD;;AAED,kBAAI4D,WAAWC,KAAKC,IAAL,CAAUnD,SAASoD,KAAT,CAAe/F,QAAQgG,KAAR,CAAcC,IAA7B,IAAqC,IAA/C,CAAf;AACA,kBAAIC,SAASL,KAAKC,IAAL,CAAUnD,SAASoD,KAAT,CAAe/F,QAAQgG,KAAR,CAAcG,EAA7B,IAAmC,IAA7C,CAAb;;AAEA;AACA,kBAAI3G,SAAShB,EAAE4H,SAAF,CAAYT,CAAZ,CAAb;AACA,oBAAKU,sBAAL,CAA4B7G,MAA5B,EAAoCQ,OAApC;;AAEA;AACA,kBAAIsG,gBAAgBlI,iBAAiBoB,OAAOI,SAAxB,EAAmC,MAAnC,CAApB;AACA,kBAAI0G,cAAczG,MAAlB,EAA0B;AAAA,gCACK4B,SAAS6E,aAAT,EAAwB,CAACV,QAAD,EAAWM,MAAX,CAAxB,CADL;AAAA;AAAA,oBACjBK,SADiB;AAAA,oBACNC,OADM;;AAExBZ,2BAAWW,SAAX;AACAL,yBAASM,OAAT;AACD;AACD,kBAAIC,YAAY,CAACb,QAAD,EAAWM,MAAX,CAAhB;;AAEA,kBAAIQ,YAAY,MAAKC,WAAL,CAAiBF,SAAjB,CAAhB;;AAEA;AACA,kBAAI,CAACjH,OAAOoH,IAAR,IAAgBpH,OAAOoH,IAAP,KAAgB/D,EAAEgE,YAAlC,IACArH,OAAOoH,IAAP,KAAgB/D,EAAEiE,SADlB,IAC+BtH,OAAOoH,IAAP,KAAgB/D,EAAEkE,WADrD,EACkE;AAChE;AACAvH,yBAASoD,WAAWoE,OAAX,CAAmBxH,MAAnB,CAAT;;AAEA;AACA,oBAAIA,OAAOwC,IAAP,IAAe,CAACxC,OAAOyC,KAAvB,IAAgC,CAACzC,OAAO0C,IAAxC,IAAgD,CAAC1C,OAAO2C,IAA5D,EAAkE;AAChE,yBAAO,EAAP;AACD;;AAED,oBAAI,CAAC3C,OAAOoH,IAAR,IAAgBpH,OAAOoH,IAAP,KAAgB/D,EAAEgE,YAAtC,EAAoD;AAClD,yBAAO,MAAKI,gBAAL,CAAsBzH,MAAtB,EAA8BiH,SAA9B,EAAyCC,SAAzC,EAAoD1G,OAApD,CAAP;AACD,iBAFD,MAEO,IAAIR,OAAOoH,IAAP,KAAgB/D,EAAEiE,SAAtB,EAAiC;AACtC,yBAAO,MAAKI,aAAL,CAAmB1H,MAAnB,EAA2BiH,SAA3B,CAAP;AACD,iBAFM,MAEA,IAAIjH,OAAOoH,IAAP,KAAgB/D,EAAEkE,WAAtB,EAAmC;AACxC,yBAAO,MAAKI,eAAL,CAAqB3H,MAArB,EAA6BiH,SAA7B,EAAwCC,SAAxC,EAAmD1G,OAAnD,CAAP;AACD;AACF,eAjBD,MAiBO,IAAIR,OAAOoH,IAAP,KAAgB/D,EAAEuE,cAAtB,EAAsC;AAC3C;AACA,uBAAO,MAAKC,kBAAL,CAAwB7H,MAAxB,EAAgCiH,SAAhC,EAA2CzG,OAA3C,CAAP;AACD;AACF,aA9Cc,CAAf;;AAgDA;AACA,mBAAOsH,QAAQC,GAAR,CAAY/I,EAAEgJ,OAAF,CAAU9B,QAAV,CAAZ,EACJT,IADI,CACCzG,EAAEgJ,OADH,EAEJvC,IAFI,CAEC,gBAAQ;AACZ,qBAAO,EAAEwC,MAAMA,IAAR,EAAP;AACD,aAJI,CAAP;AAKD;;;2CAKgBjI,M,EAAQiH,S,EAAWC,S,EAAW1G,O,EAAS;AAAA;;AACtD,gBAAI0H,iBAAiB;AACnBC,wBAAU;AADS,aAArB;AAGA,mBAAO,KAAK5C,MAAL,CAAY6C,kBAAZ,CAA+BpI,MAA/B,EAAuCkI,cAAvC,EACNzC,IADM,CACD,iBAAS;AACb,qBAAO,OAAK4C,wBAAL,CAA8BC,KAA9B,EAAqCtI,MAArC,EAA6CiH,SAA7C,EAAwDC,SAAxD,EAAmE1G,OAAnE,CAAP;AACD,aAHM,CAAP;AAID;;;mDAKwB8H,K,EAAOtI,M,EAAQiH,S,EAAWC,S,EAAW1G,O,EAAS;AAAA;;AAAA,4CAC5CyG,SAD4C;AAAA,gBAChEb,QADgE;AAAA,gBACtDM,MADsD;;AAErE,gBAAI6B,0BAAJ;AACA/H,oBAAQP,aAAR,GAAwBF,iBAAiBC,MAAjB,CAAxB;;AAEA,gBAAIkH,SAAJ,EAAe;AACb,kBAAI,KAAKhC,wBAAT,EAAmC;AACjCqD,oCAAoB,KAAKhD,MAAL,CAAYiD,WAAZ,CAAwBF,KAAxB,EAA+BlC,QAA/B,EAAyCM,MAAzC,EAAiDlG,OAAjD,EACnBiF,IADmB,CACd;AAAA,yBAAW,OAAKF,MAAL,CAAYkD,WAAZ,CAAwBC,uBAAxB,CAAgDC,OAAhD,EAAyDL,KAAzD,CAAX;AAAA,iBADc,CAApB;AAED,eAHD,MAGO;AACL,oBAAIM,YAAY,KAAKC,iBAAL,CAAuB7I,MAAvB,CAAhB;AACAuI,oCAAoB,KAAKhD,MAAL,CAAYuD,QAAZ,CAAqBR,KAArB,EAA4BlC,QAA5B,EAAsCM,MAAtC,EACnBjB,IADmB,CACd;AAAA,yBAAWnC,gBAAgByF,YAAhB,CAA6BJ,OAA7B,EAAsCL,KAAtC,EAA6CM,SAA7C,CAAX;AAAA,iBADc,EAEnBnD,IAFmB,CAEd,sBAAc;AAClB;AACAzG,oBAAE+G,OAAF,CAAUpF,UAAV,EAAsB,kBAAU;AAC9BqI,2BAAOpI,UAAP,GAAoB5B,EAAEiK,MAAF,CAASD,OAAOpI,UAAhB,EAA4B;AAAA,6BAASsI,MAAM7F,EAAE8F,YAAR,CAAT;AAAA,qBAA5B,CAApB;AACD,mBAFD;AAGA,yBAAOxI,UAAP;AACD,iBARmB,CAApB;AASD;AACF,aAhBD,MAgBO;AACL;AACA,kBAAI,KAAKuE,wBAAT,EAAmC;AACjCqD,oCAAoB,KAAKhD,MAAL,CAAY6D,YAAZ,CAAyBd,KAAzB,EAAgClC,QAAhC,EAA0CM,MAA1C,EAAkDlG,OAAlD,EACnBiF,IADmB,CACd;AAAA,yBAAW,OAAKF,MAAL,CAAYkD,WAAZ,CAAwBC,uBAAxB,CAAgDC,OAAhD,EAAyDL,KAAzD,CAAX;AAAA,iBADc,CAApB;AAED,eAHD,MAGO;AACLC,oCAAoB,KAAKhD,MAAL,CAAY8D,UAAZ,CAAuBf,KAAvB,EAA8BlC,QAA9B,EAAwCM,MAAxC,EACnBjB,IADmB,CACd;AAAA,yBAAWnC,gBAAgBgG,aAAhB,CAA8BX,OAA9B,EAAuCL,KAAvC,CAAX;AAAA,iBADc,CAApB;AAED;AACF;;AAED,mBAAOC,kBACN9C,IADM,CACD;AAAA,qBAAc,OAAK8D,4BAAL,CAAkC5I,UAAlC,EAA8CX,MAA9C,CAAd;AAAA,aADC,EAENyF,IAFM,CAED;AAAA,qBAAcnF,iBAAiBK,UAAjB,EAA6BH,OAA7B,CAAd;AAAA,aAFC,EAGNgJ,KAHM,CAGA,iBAAS;AACdC,sBAAQC,GAAR,CAAYC,KAAZ;AACA,qBAAO,EAAP;AACD,aANM,CAAP;AAOD;;;4CAEiB3J,M,EAAQ;AACxB;AACA,gBAAI4J,iBAAiB5K,EAAEC,GAAF,CAAMC,gBAAgBC,aAAhB,GAAgC,QAAhC,CAAN,EAAiD,MAAjD,CAArB;AACA,gBAAI0K,iBAAiB7K,EAAEmB,IAAF,CAAOH,OAAOI,SAAd,EAAyB,gBAAQ;AACpD,qBAAOpB,EAAEO,QAAF,CAAWqK,cAAX,EAA2BtK,KAAKE,GAAL,CAASC,IAApC,CAAP;AACD,aAFoB,CAArB;AAGA,mBAAOoK,iBAAiBA,eAAejK,MAAf,CAAsB,CAAtB,CAAjB,GAA4C,KAAnD;AACD;;;uDAE4BW,e,EAAiBP,M,EAAQ;AACpD,gBAAI8J,qBAAuBlL,iBAAiBoB,OAAOI,SAAxB,EAAmC,WAAnC,CAA3B;AACA,gBAAIrB,uBAAuBH,iBAAiBoB,OAAOI,SAAxB,EAAmC,WAAnC,CAA3B;AACA,gBAAI2J,kBAAuBnL,iBAAiBoB,OAAOI,SAAxB,EAAmC,QAAnC,CAA3B;AACA,gBAAI4J,iBAAuBpL,iBAAiBoB,OAAOI,SAAxB,EAAmC,OAAnC,CAA3B;;AAEA;AACAG,8BAAkBvB,EAAE4H,SAAF,CAAY5H,EAAEC,GAAF,CAAMsB,eAAN,EAAuB,sBAAc;AACjEI,yBAAWC,UAAX,GAAwBqB,SAAS6H,kBAAT,EAA6BnJ,WAAWC,UAAxC,CAAxB;AACA,qBAAOD,UAAP;AACD,aAH6B,CAAZ,CAAlB;;AAKA;AACA,gBAAIoJ,gBAAgB1J,MAApB,EAA4B;AAC1BE,gCAAkB0B,SAAS8H,eAAT,EAA0BxJ,eAA1B,CAAlB;AACD;;AAED;AACA,gBAAIxB,qBAAqBsB,MAAzB,EAAiC;AAC/B,kBAAI4J,KAAKjL,EAAEC,GAAF,CAAMsB,eAAN,EAAuB,YAAvB,CAAT;AACA0J,mBAAKhI,SAASlD,oBAAT,EAA+BkL,EAA/B,CAAL;;AAEA,kBAAIC,eAAelL,EAAEC,GAAF,CAAMC,gBAAgBC,aAAhB,GAAgC,WAAhC,CAAN,EAAoD,MAApD,CAAnB;AACA,kBAAIgL,UAAUnL,EAAEoL,QAAF,CAAWpK,OAAOI,SAAlB,EAA6B,gBAAQ;AACjD,uBAAOpB,EAAEO,QAAF,CAAW2K,YAAX,EAAyB5K,KAAKE,GAAL,CAASC,IAAlC,CAAP;AACD,eAFa,CAAd;;AAIAc,gCAAkB,CAAC;AACjBP,wBAAQmK,QAAQjJ,IADC;AAEjBN,4BAAYqJ;AAFK,eAAD,CAAlB;AAID;;AAED;AACAjL,cAAE+G,OAAF,CAAUxF,eAAV,EAA2B0B,SAAS+H,cAAT,CAA3B;;AAEA;AACA;AACA,iBAAKK,sBAAL,CAA4B9J,eAA5B,EAA6CP,MAA7C;;AAEA,mBAAOO,eAAP;AACD;;;iDAEsBA,e,EAAiBP,M,EAAQ;AAC9C;AACA,gBAAIsK,gBAAgBtL,EAAEmB,IAAF,CAAOH,OAAOI,SAAd,EAAyB,UAACd,IAAD,EAAU;AACrD,qBAAOA,KAAKE,GAAL,CAASC,IAAT,KAAkB,WAAzB;AACD,aAFmB,CAApB;AAGA,gBAAI6K,aAAJ,EAAmB;AACjB,kBAAIC,QAAQD,cAAc1K,MAAd,CAAqB,CAArB,CAAZ;AACAZ,gBAAE+G,OAAF,CAAUxF,eAAV,EAA2B,UAACyI,MAAD,EAAY;AACrCA,uBAAOpI,UAAP,GAAoBd,cAAc0K,iBAAd,CAAgCD,KAAhC,EAAuCvB,OAAOpI,UAA9C,CAApB;AACD,eAFD;AAGD;AACF;;;wCAKaZ,M,EAAQiH,S,EAAW;AAAA;;AAAA,6CACNA,SADM;AAAA,gBAC1Bb,QAD0B;AAAA,gBAChBM,MADgB;;AAE/B,gBAAIlG,UAAU;AACZ2H,wBAAU;AADE,aAAd;AAGA,mBAAO,KAAK5C,MAAL,CAAY6C,kBAAZ,CAA+BpI,MAA/B,EAAuCQ,OAAvC,EACJiF,IADI,CACC,iBAAS;AACb,kBAAI6C,MAAMjI,MAAV,EAAkB;AAChB,uBAAO,OAAKkF,MAAL,CAAY8D,UAAZ,CAAuBf,KAAvB,EAA8BlC,QAA9B,EAAwCM,MAAxC,EACNjB,IADM,CACD,mBAAW;AACf,yBAAOnC,gBAAgBmH,UAAhB,CAA2B9B,OAA3B,EAAoCL,KAApC,EAA2CtI,MAA3C,CAAP;AACD,iBAHM,CAAP;AAID,eALD,MAKO;AACL,uBAAO8H,QAAQ4C,OAAR,CAAgB,EAAhB,CAAP;AACD;AACF,aAVI,CAAP;AAWD;;;0CAKe1K,M,EAAQiH,S,EAAWC,S,EAAW1G,O,EAAS;AAAA;;AACrD,gBAAImK,UAAU3K,OAAO2K,OAArB;AACAA,sBAAU,KAAK/I,WAAL,CAAiBG,OAAjB,CAAyB4I,OAAzB,EAAkCnK,QAAQqB,UAA1C,EAAsDH,2BAAtD,CAAV;AACAiJ,sBAAU3L,EAAEC,GAAF,CAAM0L,QAAQC,KAAR,CAAc,GAAd,CAAN,EAA0B;AAAA,qBAAUC,OAAOC,IAAP,EAAV;AAAA,aAA1B,CAAV;;AAEA,gBAAI,CAACH,OAAL,EAAc;AACZ,qBAAO,EAAP;AACD;;AAED,mBAAO,KAAKpF,MAAL,CAAYwF,aAAZ,CAA0BJ,OAA1B,EACNlF,IADM,CACD,iBAAS;AACb,qBAAO,OAAK4C,wBAAL,CAA8BC,KAA9B,EAAqCtI,MAArC,EAA6CiH,SAA7C,EAAwDC,SAAxD,EAAmE1G,OAAnE,CAAP;AACD,aAHM,CAAP;AAID;;;6CAKkBR,M,EAAQiH,S,EAAWzG,O,EAAS;AAAA;;AAC7C;AACA,gBAAIR,OAAOwC,IAAP,IAAgB,CAACxC,OAAOgL,SAAR,IAAqB,CAAChL,OAAOiL,eAA7C,IAAiE,CAACjL,OAAOkL,WAA7E,EAA0F;AACxF,qBAAO,EAAP;AACD;;AAED,gBAAIC,eAAe,EAAnB;AACA,gBAAIC,aAAa,EAAjB;AACA,gBAAIH,wBAAJ;AACA,gBAAII,eAAerL,OAAOgL,SAAP,IAAoB,CAAChL,OAAOiL,eAA/C;;AAEA,gBAAII,YAAJ,EAAkB;AAChB;AACAJ,gCAAkB,MAAlB;AACD,aAHD,MAGO;AACLA,gCAAkB,KAAKtJ,mBAAL,CAAyB3B,OAAOiL,eAAhC,EAAiDzK,QAAQqB,UAAzD,CAAlB;AACD;;AAED,mBAAO,KAAK0D,MAAL,CAAY+F,aAAZ,CAA0BL,eAA1B,EACNxF,IADM,CACD,sBAAc;AAClB2F,2BAAaG,UAAb;AACA,kBAAIF,YAAJ,EAAkB;AAChBD,6BAAapM,EAAEK,MAAF,CAAS+L,UAAT,EAAqB,EAAC,aAAapL,OAAOgL,SAAP,CAAiBQ,SAA/B,EAArB,CAAb;AACD;;AAEDL,6BAAenM,EAAEC,GAAF,CAAMmM,UAAN,EAAkB,WAAlB,CAAf;AACA,qBAAOD,YAAP;AACD,aATM,EAUN1F,IAVM,CAUD,sBAAc;AAClB,qBAAO,OAAKF,MAAL,CAAYkG,MAAZ,CAAmBC,UAAnB,EAA+BzE,SAA/B,CAAP;AACD,aAZM,EAaNxB,IAbM,CAaD,uBAAe;AACnB,qBAAOzG,EAAEC,GAAF,CAAMkM,YAAN,EAAoB,qBAAa;AACtC,oBAAIH,YAAYhM,EAAEmB,IAAF,CAAOiL,UAAP,EAAmB,EAAC,aAAaI,SAAd,EAAnB,CAAhB;AACA,uBAAOlI,gBAAgBqI,iBAAhB,CAAkCX,SAAlC,EAA6ChL,OAAOkL,WAApD,EAAiEU,WAAjE,CAAP;AACD,eAHM,CAAP;AAID,aAlBM,CAAP;AAmBD;;;2CAMgB;AAAA;;AACf,gBAAIC,sBAAJ;AACA,mBAAO,KAAKtG,MAAL,CAAYuG,UAAZ,GACNrG,IADM,CACD,mBAAW;AACfoG,8BAAgBE,OAAhB;AACA,qBAAO,OAAKxG,MAAL,CAAYyG,KAAZ,EAAP;AACD,aAJM,EAKNvG,IALM,CAKD,YAAM;AACV,kBAAI,OAAKP,wBAAT,EAAmC;AACjC,uBAAO,OAAKK,MAAL,CAAYkD,WAAZ,CAAwBwD,iBAAxB,EAAP;AACD,eAFD,MAEO;AACL,uBAAOnE,QAAQ4C,OAAR,EAAP;AACD;AACF,aAXM,EAYNjF,IAZM,CAYD,YAAM;AACV,qBAAO;AACLyG,wBAAQ,SADH;AAELC,uBAAO,SAFF;AAGLC,yBAAS,4BAA4BP;AAHhC,eAAP;AAKD,aAlBM,EAmBNrC,KAnBM,CAmBA,iBAAS;AACd,kBAAIG,iBAAiBpG,cAArB,EAAqC;AACnC,uBAAO;AACL2I,0BAAQ,OADH;AAELC,yBAAOxC,MAAMyC,OAFR;AAGLA,2BAASzC,MAAM1B;AAHV,iBAAP;AAKD,eAND,MAMO,IAAI0B,MAAM1B,IAAN,IAAc0B,MAAM1B,IAAN,CAAWmE,OAA7B,EAAsC;AAC3C,uBAAO;AACLF,0BAAQ,OADH;AAELC,yBAAO,mBAFF;AAGLC,2BAASzC,MAAM1B,IAAN,CAAWmE;AAHf,iBAAP;AAKD,eANM,MAMA;AACL,uBAAO;AACLF,0BAAQ,OADH;AAELC,yBAAO,mBAFF;AAGLC,2BAAS;AAHJ,iBAAP;AAKD;AACF,aAvCM,CAAP;AAwCD;;;0CAaeC,K,EAAO;AAAA;;AACrB,gBAAIlK,eAAJ;AACA,gBAAImK,QAAQ,EAAZ;;AAEA;AACAtN,cAAEuN,IAAF,CAAOjL,MAAMkL,kBAAN,CAAyBH,KAAzB,CAAP,EAAwC,gBAAQ;AAC9CI,qBAAO,OAAK9K,mBAAL,CAAyB8K,IAAzB,EAA+B,EAA/B,CAAP;;AAEA;AACA,kBAAIA,SAAS,GAAb,EAAkB;AAChBA,uBAAO,MAAP;AACD;AACDH,oBAAMI,IAAN,CAAWD,IAAX;AACD,aARD;AASA,gBAAIE,WAAW3N,EAAE4N,SAAF,CAAY,CAAC,OAAD,EAAU,MAAV,EAAkB,KAAlB,EAAyB,MAAzB,CAAZ,EAA8CN,KAA9C,CAAf;;AAEA;AACA,gBAAIA,MAAMjM,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACA,kBAAIsM,SAASE,GAAT,KAAiB,MAArB,EAA6B;AAC3BF,yBAASE,GAAT,GAAe,EAAf;AACD;AACD1K,uBAAS,KAAKoD,MAAL,CAAYuH,QAAZ,CAAqBH,SAASlK,KAA9B,EAAqCkK,SAASjK,IAA9C,EAAoDiK,SAASE,GAA7D,EAAkEF,SAAShK,IAA3E,CAAT;AACD,aAND,MAMO,IAAI2J,MAAMjM,MAAN,KAAiB,CAArB,EAAwB;AAC7B;AACA8B,uBAAS,KAAKoD,MAAL,CAAYwH,OAAZ,CAAoBJ,SAASlK,KAA7B,EAAoCkK,SAASjK,IAA7C,EAAmDiK,SAASE,GAA5D,CAAT;AACD,aAHM,MAGA,IAAIP,MAAMjM,MAAN,KAAiB,CAArB,EAAwB;AAC7B;AACA8B,uBAAS,KAAKoD,MAAL,CAAYyH,QAAZ,CAAqBL,SAASlK,KAA9B,EAAqCkK,SAASjK,IAA9C,CAAT;AACD,aAHM,MAGA,IAAI4J,MAAMjM,MAAN,KAAiB,CAArB,EAAwB;AAC7B;AACA8B,uBAAS,KAAKoD,MAAL,CAAY0H,SAAZ,CAAsBN,SAASlK,KAA/B,CAAT;AACD,aAHM,MAGA;AACLN,uBAAS2F,QAAQ4C,OAAR,CAAgB,EAAhB,CAAT;AACD;;AAED,mBAAOvI,OAAOsD,IAAP,CAAY,mBAAW;AAC5B,qBAAOzG,EAAEC,GAAF,CAAMiO,OAAN,EAAelM,YAAf,CAAP;AACD,aAFM,CAAP;AAGD;;;0CAMeR,O,EAAS;AAAA;;AACvB,gBAAI4F,WAAWC,KAAKC,IAAL,CAAUnD,SAASoD,KAAT,CAAe/F,QAAQ2M,QAAR,CAAiB1G,IAAhC,IAAwC,IAAlD,CAAf;AACA,gBAAIC,SAASL,KAAKC,IAAL,CAAUnD,SAASoD,KAAT,CAAe/F,QAAQ2M,QAAR,CAAiBxG,EAAhC,IAAsC,IAAhD,CAAb;AACA,gBAAIyG,aAAa5M,QAAQ4M,UAAzB;AACA,gBAAIC,eAAeD,WAAWC,YAAX,GAA0BhK,EAAEiK,eAA5B,GAA8CjK,EAAEkK,cAAnE;;AAEA;AACA,gBAAIC,kBAAkB;AACpBC,4BAAcpK,EAAEqK,iBADI;AAEpBC,sCAAwB;AAFJ,aAAtB;;AAKA,gBAAIC,cAAc,KAAKrI,MAAL,CAAYqI,WAAZ,CAAwB,KAAKjM,mBAAL,CAAyByL,WAAW3K,KAApC,EAA2C,EAA3C,CAAxB,EACwB,KAAKd,mBAAL,CAAyByL,WAAW1K,IAApC,EAA0C,EAA1C,CADxB,EAEwB,KAAKf,mBAAL,CAAyByL,WAAWS,WAApC,EAAiD,EAAjD,CAFxB,EAGwBL,eAHxB,CAAlB;;AAKA,mBAAOI,YAAYnI,IAAZ,CAAiB,oBAAY;;AAElC;AACA,kBAAIqI,cAAc,OAAKnM,mBAAL,CAAyByL,WAAWW,OAApC,EAA6C,EAA7C,CAAlB;AACA,kBAAIzM,MAAMU,OAAN,CAAc8L,WAAd,CAAJ,EAAgC;AAC9BE,2BAAWhP,EAAEK,MAAF,CAAS2O,QAAT,EAAmB,mBAAW;AACvC,yBAAO1M,MAAM2M,UAAN,CAAiBH,WAAjB,EAA8BI,IAA9B,CAAmCH,QAAQI,WAA3C,CAAP;AACD,iBAFU,CAAX;AAGD,eAJD,MAIO,IAAIL,WAAJ,EAAiB;AACtBE,2BAAWhP,EAAEK,MAAF,CAAS2O,QAAT,EAAmB,mBAAW;AACvC,yBAAOD,QAAQI,WAAR,KAAwBL,WAA/B;AACD,iBAFU,CAAX;AAGD;;AAED;AACAE,yBAAWhP,EAAEK,MAAF,CAAS2O,QAAT,EAAmB,mBAAW;AACvC,uBAAO9K,OAAO6K,QAAQK,QAAf,KAA4BlL,OAAOkK,WAAWiB,WAAlB,CAAnC;AACD,eAFU,CAAX;;AAIA,kBAAIC,YAAYtP,EAAEC,GAAF,CAAM+O,QAAN,EAAgB,WAAhB,CAAhB;AACA,qBAAO,OAAKzI,MAAL,CACJgJ,SADI,CACMD,SADN,EACiBlI,QADjB,EAC2BM,MAD3B,EACmC2G,YADnC,EAEJ5H,IAFI,CAEC,kBAAU;AACd,oBAAI+I,kBAAkBxP,EAAEyP,KAAF,CAAQT,QAAR,EAAkB,WAAlB,CAAtB;;AAEA;AACA,oBAAIZ,WAAWsB,gBAAf,EAAiC;AAC/BC,2BAAS3P,EAAEK,MAAF,CAASsP,MAAT,EAAiB,iBAAS;AACjC,2BAAO,CAACC,MAAMC,YAAN,CAAmBxO,MAA3B;AACD,mBAFQ,CAAT;AAGD;;AAED,uBAAOrB,EAAEC,GAAF,CAAM0P,MAAN,EAAc,iBAAS;AAC5B,sBAAIG,aAAJ;AACA,sBAAI1B,WAAW2B,YAAf,EAA6B;AAC3BD,2BAAO9P,EAAEC,GAAF,CAAM2P,MAAMI,KAAZ,EAAmB,MAAnB,CAAP;AACD;;AAED;AACA,sBAAI7C,QAAQjJ,OAAO0L,MAAMvN,KAAb,IAAsB,SAAtB,GAAkC,IAA9C;;AAEA,sBAAI4N,yBAAyB3N,MAAM4N,kBAAN,CAAyBN,MAAMC,YAA/B,CAA7B;AACA,yBAAO;AACLzB,gCAAYA,UADP;AAEL+B,0BAAMP,MAAMQ,KAAN,GAAc,IAFf;AAGLjD,2BAAOA,KAHF;AAIL2C,0BAAMA,IAJD;AAKL5N,0BAAMsN,gBAAgBI,MAAMS,QAAtB,EAAgClB,WAAhC,GAA8Cc;AAL/C,mBAAP;AAOD,iBAjBM,CAAP;AAkBD,eA9BI,CAAP;AA+BD,aAnDM,CAAP;AAoDD;;;qCAOUzO,O,EAAS;AAAA;;AAClB,gBAAI8O,kBAAkBhN,qBAAqB9B,QAAQ+B,OAA7B,CAAtB;AACA,gBAAIgN,gBAAgBvQ,EAAEC,GAAF,CAAMqQ,eAAN,EAAuB,aAAK;AAC9C,kBAAItP,SAAShB,EAAE4H,SAAF,CAAYT,CAAZ,CAAb;AACA,sBAAKU,sBAAL,CAA4B7G,MAA5B,EAAoCQ,OAApC;AACA,qBAAO,QAAK+E,MAAL,CAAY6C,kBAAZ,CAA+BpI,MAA/B,EAAuC,EAACmI,UAAU,KAAX,EAAvC,CAAP;AACD,aAJmB,CAApB;;AAMA,mBAAOL,QAAQC,GAAR,CAAYwH,aAAZ,EACN9J,IADM,CACD,mBAAW;AACf,kBAAI6C,QAAQtJ,EAAEgJ,OAAF,CAAUwH,OAAV,CAAZ;AACA,kBAAI7E,UAAU3L,EAAEC,GAAF,CAAMqJ,KAAN,EAAa,QAAb,CAAd;;AAEA,qBAAO,QAAK/C,MAAL,CAAYkK,SAAZ,CAAsB9E,OAAtB,CAAP;AACD,aANM,EAONlF,IAPM,CAOD,oBAAY;AAChBuI,yBAAWhP,EAAEK,MAAF,CAAS2O,QAAT,EAAmB,mBAAW;AACvC,uBAAOD,QAAQK,QAAR,IAAoB,QAAKtJ,mBAAhC;AACD,eAFU,CAAX;;AAIA,kBAAI,CAACkJ,QAAD,IAAaA,SAAS3N,MAAT,KAAoB,CAArC,EAAwC;AACtC,uBAAO,EAAP;AACD;;AAED,kBAAIwF,QAAQ,IAAZ;;AAEA,kBAAI6J,gBAAgB1Q,EAAEK,MAAF,CAAS2O,QAAT,EAAmB,EAAC3M,OAAO,GAAR,EAAnB,CAApB;AACA,kBAAIqO,cAAcrP,MAAlB,EAA0B;AACxBwF,wBAAQ,UAAR;AACD;;AAED,kBAAIG,aAAahH,EAAEC,GAAF,CAAM+O,QAAN,EAAgB,mBAAW;AAC1C,uBAAOpL,oBAAoBmL,QAAQlL,UAA5B,CAAP;AACD,eAFgB,CAAjB;;AAIA,qBAAO;AACL8C,yBAASnF,QAAQmF,OADZ;AAELE,uBAAOA,KAFF;AAGLG,4BAAYA;AAHP,eAAP;AAKD,aAhCM,CAAP;AAiCD;;;iDAGsBhG,M,EAAQQ,O,EAAS;AAAA;;AACtC,gBAAI8L,QAAQ,CAAC,OAAD,EAAU,MAAV,EAAkB,aAAlB,EAAiC,MAAjC,CAAZ;AACAtN,cAAE+G,OAAF,CAAUuG,KAAV,EAAiB,aAAK;AACpB,kBAAItM,OAAO2P,CAAP,KAAa3P,OAAO2P,CAAP,EAAUtQ,MAA3B,EAAmC;AACjCW,uBAAO2P,CAAP,EAAUtQ,MAAV,GAAmB,QAAKsC,mBAAL,CAAyB3B,OAAO2P,CAAP,EAAUtQ,MAAnC,EAA2CmB,QAAQqB,UAAnD,CAAnB;AACD;AACF,aAJD;AAKA7B,mBAAO4P,UAAP,GAAoB,KAAKjO,mBAAL,CAAyB3B,OAAO4P,UAAhC,EAA4CpP,QAAQqB,UAApD,CAApB;;AAEA7C,cAAE+G,OAAF,CAAU/F,OAAOI,SAAjB,EAA4B,gBAAQ;AAClCd,mBAAKM,MAAL,GAAcZ,EAAEC,GAAF,CAAMK,KAAKM,MAAX,EAAmB,iBAAS;AACxC,oBAAI,OAAOiQ,KAAP,KAAiB,QAArB,EAA+B;AAC7B,yBAAO,CAAC,QAAKjO,WAAL,CAAiBG,OAAjB,CAAyB8N,MAAMC,QAAN,EAAzB,EAA2CtP,QAAQqB,UAAnD,CAAR;AACD,iBAFD,MAEO;AACL,yBAAO,QAAKD,WAAL,CAAiBG,OAAjB,CAAyB8N,KAAzB,EAAgCrP,QAAQqB,UAAxC,CAAP;AACD;AACF,eANa,CAAd;AAOD,aARD;AASD;;;sCAEWoF,S,EAAW;AAAA,6CACIA,SADJ;AAAA,gBAChBb,QADgB;AAAA,gBACNM,MADM;;AAErB,gBAAIqJ,gBAAgB1J,KAAKC,IAAL,CAAUnD,SAASoD,KAAT,CAAe,SAAS,KAAKjC,UAA7B,IAA2C,IAArD,CAApB;AACA,gBAAI0L,iBAAiB3J,KAAKC,IAAL,CAAUhF,MAAMoD,aAAN,CAAoB,KAAKH,WAAzB,IAAwC,IAAlD,CAArB;AACA,gBAAI2C,YAAY,KAAK7C,MAAL,KACb+B,YAAY2J,aAAb,IACCrJ,SAASN,QAAT,IAAqB4J,cAFR,CAAhB;AAIA,mBAAO9I,SAAP;AACD;;;;;;qCAoHK1D,mB;;sCAAqBpC,oB;;AAE7B;AACA,UAAI,CAACpC,EAAEO,QAAP,EAAiB;AAACP,UAAEO,QAAF,GAAaP,EAAEiR,QAAf;AAAyB;AAC3C,UAAI,CAACjR,EAAEyP,KAAP,EAAc;AAACzP,UAAEyP,KAAF,GAAUzP,EAAEkR,OAAZ;AAAqB","file":"datasource.js","sourcesContent":["import _ from 'lodash';\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport * as utils from './utils';\r\nimport * as migrations from './migrations';\r\nimport * as metricFunctions from './metricFunctions';\r\nimport * as c from './constants';\r\nimport dataProcessor from './dataProcessor';\r\nimport responseHandler from './responseHandler';\r\nimport './zabbix.js';\r\nimport './zabbixAlerting.service.js';\r\nimport {ZabbixAPIError} from './zabbixAPICore.service.js';\r\n\r\nclass ZabbixAPIDatasource {\r\n\r\n  /** @ngInject */\r\n  constructor(instanceSettings, templateSrv, alertSrv, dashboardSrv, zabbixAlertingSrv, Zabbix) {\r\n    this.templateSrv = templateSrv;\r\n    this.alertSrv = alertSrv;\r\n    this.dashboardSrv = dashboardSrv;\r\n    this.zabbixAlertingSrv = zabbixAlertingSrv;\r\n\r\n    // Use custom format for template variables\r\n    this.replaceTemplateVars = _.partial(replaceTemplateVars, this.templateSrv);\r\n\r\n    // General data source settings\r\n    this.name             = instanceSettings.name;\r\n    this.url              = instanceSettings.url;\r\n    this.basicAuth        = instanceSettings.basicAuth;\r\n    this.withCredentials  = instanceSettings.withCredentials;\r\n\r\n    // Zabbix API credentials\r\n    this.username         = instanceSettings.jsonData.username;\r\n    this.password         = instanceSettings.jsonData.password;\r\n\r\n    // Use trends instead history since specified time\r\n    this.trends           = instanceSettings.jsonData.trends;\r\n    this.trendsFrom       = instanceSettings.jsonData.trendsFrom || '7d';\r\n    this.trendsRange      = instanceSettings.jsonData.trendsRange || '4d';\r\n\r\n    // Set cache update interval\r\n    var ttl = instanceSettings.jsonData.cacheTTL || '1h';\r\n    this.cacheTTL = utils.parseInterval(ttl);\r\n\r\n    // Alerting options\r\n    this.alertingEnabled = instanceSettings.jsonData.alerting;\r\n    this.addThresholds = instanceSettings.jsonData.addThresholds;\r\n    this.alertingMinSeverity = instanceSettings.jsonData.alertingMinSeverity || c.SEV_WARNING;\r\n\r\n    // Direct DB Connection options\r\n    let dbConnectionOptions = instanceSettings.jsonData.dbConnection || {};\r\n    this.enableDirectDBConnection = dbConnectionOptions.enable;\r\n    this.sqlDatasourceId = dbConnectionOptions.datasourceId;\r\n\r\n    let zabbixOptions = {\r\n      username: this.username,\r\n      password: this.password,\r\n      basicAuth: this.basicAuth,\r\n      withCredentials: this.withCredentials,\r\n      cacheTTL: this.cacheTTL,\r\n      enableDirectDBConnection: this.enableDirectDBConnection,\r\n      sqlDatasourceId: this.sqlDatasourceId\r\n    };\r\n\r\n    this.zabbix = new Zabbix(this.url, zabbixOptions);\r\n  }\r\n\r\n  ////////////////////////\r\n  // Datasource methods //\r\n  ////////////////////////\r\n\r\n  /**\r\n   * Query panel data. Calls for each panel in dashboard.\r\n   * @param  {Object} options   Contains time range, targets and other info.\r\n   * @return {Object} Grafana metrics object with timeseries data for each target.\r\n   */\r\n  query(options) {\r\n    // Get alerts for current panel\r\n    if (this.alertingEnabled) {\r\n      this.alertQuery(options).then(alert => {\r\n        this.zabbixAlertingSrv.setPanelAlertState(options.panelId, alert.state);\r\n\r\n        this.zabbixAlertingSrv.removeZabbixThreshold(options.panelId);\r\n        if (this.addThresholds) {\r\n          _.forEach(alert.thresholds, threshold => {\r\n            this.zabbixAlertingSrv.setPanelThreshold(options.panelId, threshold);\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    // Create request for each target\r\n    let promises = _.map(options.targets, t => {\r\n      // Don't request undefined and hidden targets\r\n      if (t.hide) {\r\n        return [];\r\n      }\r\n\r\n      let timeFrom = Math.ceil(dateMath.parse(options.range.from) / 1000);\r\n      let timeTo = Math.ceil(dateMath.parse(options.range.to) / 1000);\r\n\r\n      // Prevent changes of original object\r\n      let target = _.cloneDeep(t);\r\n      this.replaceTargetVariables(target, options);\r\n\r\n      // Apply Time-related functions (timeShift(), etc)\r\n      let timeFunctions = bindFunctionDefs(target.functions, 'Time');\r\n      if (timeFunctions.length) {\r\n        const [time_from, time_to] = sequence(timeFunctions)([timeFrom, timeTo]);\r\n        timeFrom = time_from;\r\n        timeTo = time_to;\r\n      }\r\n      let timeRange = [timeFrom, timeTo];\r\n\r\n      let useTrends = this.isUseTrends(timeRange);\r\n\r\n      // Metrics or Text query mode\r\n      if (!target.mode || target.mode === c.MODE_METRICS ||\r\n          target.mode === c.MODE_TEXT || target.mode === c.MODE_ITEMID) {\r\n        // Migrate old targets\r\n        target = migrations.migrate(target);\r\n\r\n        // Don't request undefined and hidden targets\r\n        if (target.hide || !target.group || !target.host || !target.item) {\r\n          return [];\r\n        }\r\n\r\n        if (!target.mode || target.mode === c.MODE_METRICS) {\r\n          return this.queryNumericData(target, timeRange, useTrends, options);\r\n        } else if (target.mode === c.MODE_TEXT) {\r\n          return this.queryTextData(target, timeRange);\r\n        } else if (target.mode === c.MODE_ITEMID) {\r\n          return this.queryItemIdData(target, timeRange, useTrends, options);\r\n        }\r\n      } else if (target.mode === c.MODE_ITSERVICE) {\r\n        // IT services mode\r\n        return this.queryITServiceData(target, timeRange, options);\r\n      }\r\n    });\r\n\r\n    // Data for panel (all targets)\r\n    return Promise.all(_.flatten(promises))\r\n      .then(_.flatten)\r\n      .then(data => {\r\n        return { data: data };\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Query target data for Metrics mode\r\n   */\r\n  queryNumericData(target, timeRange, useTrends, options) {\r\n    let getItemOptions = {\r\n      itemtype: 'num'\r\n    };\r\n    return this.zabbix.getItemsFromTarget(target, getItemOptions)\r\n    .then(items => {\r\n      return this.queryNumericDataForItems(items, target, timeRange, useTrends, options);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Query history for numeric items\r\n   */\r\n  queryNumericDataForItems(items, target, timeRange, useTrends, options) {\r\n    let [timeFrom, timeTo] = timeRange;\r\n    let getHistoryPromise;\r\n    options.consolidateBy = getConsolidateBy(target);\r\n\r\n    if (useTrends) {\r\n      if (this.enableDirectDBConnection) {\r\n        getHistoryPromise = this.zabbix.getTrendsDB(items, timeFrom, timeTo, options)\r\n        .then(history => this.zabbix.dbConnector.handleGrafanaTSResponse(history, items));\r\n      } else {\r\n        let valueType = this.getTrendValueType(target);\r\n        getHistoryPromise = this.zabbix.getTrend(items, timeFrom, timeTo)\r\n        .then(history => responseHandler.handleTrends(history, items, valueType))\r\n        .then(timeseries => {\r\n          // Sort trend data, issue #202\r\n          _.forEach(timeseries, series => {\r\n            series.datapoints = _.sortBy(series.datapoints, point => point[c.DATAPOINT_TS]);\r\n          });\r\n          return timeseries;\r\n        });\r\n      }\r\n    } else {\r\n      // Use history\r\n      if (this.enableDirectDBConnection) {\r\n        getHistoryPromise = this.zabbix.getHistoryDB(items, timeFrom, timeTo, options)\r\n        .then(history => this.zabbix.dbConnector.handleGrafanaTSResponse(history, items));\r\n      } else {\r\n        getHistoryPromise = this.zabbix.getHistory(items, timeFrom, timeTo)\r\n        .then(history => responseHandler.handleHistory(history, items));\r\n      }\r\n    }\r\n\r\n    return getHistoryPromise\r\n    .then(timeseries => this.applyDataProcessingFunctions(timeseries, target))\r\n    .then(timeseries => downsampleSeries(timeseries, options))\r\n    .catch(error => {\r\n      console.log(error);\r\n      return [];\r\n    });\r\n  }\r\n\r\n  getTrendValueType(target) {\r\n    // Find trendValue() function and get specified trend value\r\n    var trendFunctions = _.map(metricFunctions.getCategories()['Trends'], 'name');\r\n    var trendValueFunc = _.find(target.functions, func => {\r\n      return _.includes(trendFunctions, func.def.name);\r\n    });\r\n    return trendValueFunc ? trendValueFunc.params[0] : \"avg\";\r\n  }\r\n\r\n  applyDataProcessingFunctions(timeseries_data, target) {\r\n    let transformFunctions   = bindFunctionDefs(target.functions, 'Transform');\r\n    let aggregationFunctions = bindFunctionDefs(target.functions, 'Aggregate');\r\n    let filterFunctions      = bindFunctionDefs(target.functions, 'Filter');\r\n    let aliasFunctions       = bindFunctionDefs(target.functions, 'Alias');\r\n\r\n    // Apply transformation functions\r\n    timeseries_data = _.cloneDeep(_.map(timeseries_data, timeseries => {\r\n      timeseries.datapoints = sequence(transformFunctions)(timeseries.datapoints);\r\n      return timeseries;\r\n    }));\r\n\r\n    // Apply filter functions\r\n    if (filterFunctions.length) {\r\n      timeseries_data = sequence(filterFunctions)(timeseries_data);\r\n    }\r\n\r\n    // Apply aggregations\r\n    if (aggregationFunctions.length) {\r\n      let dp = _.map(timeseries_data, 'datapoints');\r\n      dp = sequence(aggregationFunctions)(dp);\r\n\r\n      let aggFuncNames = _.map(metricFunctions.getCategories()['Aggregate'], 'name');\r\n      let lastAgg = _.findLast(target.functions, func => {\r\n        return _.includes(aggFuncNames, func.def.name);\r\n      });\r\n\r\n      timeseries_data = [{\r\n        target: lastAgg.text,\r\n        datapoints: dp\r\n      }];\r\n    }\r\n\r\n    // Apply alias functions\r\n    _.forEach(timeseries_data, sequence(aliasFunctions));\r\n\r\n    // Apply Time-related functions (timeShift(), etc)\r\n    // Find timeShift() function and get specified trend value\r\n    this.applyTimeShiftFunction(timeseries_data, target);\r\n\r\n    return timeseries_data;\r\n  }\r\n\r\n  applyTimeShiftFunction(timeseries_data, target) {\r\n    // Find timeShift() function and get specified interval\r\n    let timeShiftFunc = _.find(target.functions, (func) => {\r\n      return func.def.name === 'timeShift';\r\n    });\r\n    if (timeShiftFunc) {\r\n      let shift = timeShiftFunc.params[0];\r\n      _.forEach(timeseries_data, (series) => {\r\n        series.datapoints = dataProcessor.unShiftTimeSeries(shift, series.datapoints);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Query target data for Text mode\r\n   */\r\n  queryTextData(target, timeRange) {\r\n    let [timeFrom, timeTo] = timeRange;\r\n    let options = {\r\n      itemtype: 'text'\r\n    };\r\n    return this.zabbix.getItemsFromTarget(target, options)\r\n      .then(items => {\r\n        if (items.length) {\r\n          return this.zabbix.getHistory(items, timeFrom, timeTo)\r\n          .then(history => {\r\n            return responseHandler.handleText(history, items, target);\r\n          });\r\n        } else {\r\n          return Promise.resolve([]);\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Query target data for Item ID mode\r\n   */\r\n  queryItemIdData(target, timeRange, useTrends, options) {\r\n    let itemids = target.itemids;\r\n    itemids = this.templateSrv.replace(itemids, options.scopedVars, zabbixItemIdsTemplateFormat);\r\n    itemids = _.map(itemids.split(','), itemid => itemid.trim());\r\n\r\n    if (!itemids) {\r\n      return [];\r\n    }\r\n\r\n    return this.zabbix.getItemsByIDs(itemids)\r\n    .then(items => {\r\n      return this.queryNumericDataForItems(items, target, timeRange, useTrends, options);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Query target data for IT Services mode\r\n   */\r\n  queryITServiceData(target, timeRange, options) {\r\n    // Don't show undefined and hidden targets\r\n    if (target.hide || (!target.itservice && !target.itServiceFilter) || !target.slaProperty) {\r\n      return [];\r\n    }\r\n\r\n    let itServiceIds = [];\r\n    let itServices = [];\r\n    let itServiceFilter;\r\n    let isOldVersion = target.itservice && !target.itServiceFilter;\r\n\r\n    if (isOldVersion) {\r\n      // Backward compatibility\r\n      itServiceFilter = '/.*/';\r\n    } else {\r\n      itServiceFilter = this.replaceTemplateVars(target.itServiceFilter, options.scopedVars);\r\n    }\r\n\r\n    return this.zabbix.getITServices(itServiceFilter)\r\n    .then(itservices => {\r\n      itServices = itservices;\r\n      if (isOldVersion) {\r\n        itServices = _.filter(itServices, {'serviceid': target.itservice.serviceid});\r\n      }\r\n\r\n      itServiceIds = _.map(itServices, 'serviceid');\r\n      return itServiceIds;\r\n    })\r\n    .then(serviceids => {\r\n      return this.zabbix.getSLA(serviceids, timeRange);\r\n    })\r\n    .then(slaResponse => {\r\n      return _.map(itServiceIds, serviceid => {\r\n        let itservice = _.find(itServices, {'serviceid': serviceid});\r\n        return responseHandler.handleSLAResponse(itservice, target.slaProperty, slaResponse);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Test connection to Zabbix API\r\n   * @return {object} Connection status and Zabbix API version\r\n   */\r\n  testDatasource() {\r\n    let zabbixVersion;\r\n    return this.zabbix.getVersion()\r\n    .then(version => {\r\n      zabbixVersion = version;\r\n      return this.zabbix.login();\r\n    })\r\n    .then(() => {\r\n      if (this.enableDirectDBConnection) {\r\n        return this.zabbix.dbConnector.testSQLDataSource();\r\n      } else {\r\n        return Promise.resolve();\r\n      }\r\n    })\r\n    .then(() => {\r\n      return {\r\n        status: \"success\",\r\n        title: \"Success\",\r\n        message: \"Onekeeper API version: \" + zabbixVersion\r\n      };\r\n    })\r\n    .catch(error => {\r\n      if (error instanceof ZabbixAPIError) {\r\n        return {\r\n          status: \"error\",\r\n          title: error.message,\r\n          message: error.data\r\n        };\r\n      } else if (error.data && error.data.message) {\r\n        return {\r\n          status: \"error\",\r\n          title: \"Connection failed\",\r\n          message: error.data.message\r\n        };\r\n      } else {\r\n        return {\r\n          status: \"error\",\r\n          title: \"Connection failed\",\r\n          message: \"Could not connect to given url\"\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  ////////////////\r\n  // Templating //\r\n  ////////////////\r\n\r\n  /**\r\n   * Find metrics from templated request.\r\n   *\r\n   * @param  {string} query Query from Templating\r\n   * @return {string}       Metric name - group, host, app or item or list\r\n   *                        of metrics in \"{metric1,metcic2,...,metricN}\" format.\r\n   */\r\n  metricFindQuery(query) {\r\n    let result;\r\n    let parts = [];\r\n\r\n    // Split query. Query structure: group.host.app.item\r\n    _.each(utils.splitTemplateQuery(query), part => {\r\n      part = this.replaceTemplateVars(part, {});\r\n\r\n      // Replace wildcard to regex\r\n      if (part === '*') {\r\n        part = '/.*/';\r\n      }\r\n      parts.push(part);\r\n    });\r\n    let template = _.zipObject(['group', 'host', 'app', 'item'], parts);\r\n\r\n    // Get items\r\n    if (parts.length === 4) {\r\n      // Search for all items, even it's not belong to any application\r\n      if (template.app === '/.*/') {\r\n        template.app = '';\r\n      }\r\n      result = this.zabbix.getItems(template.group, template.host, template.app, template.item);\r\n    } else if (parts.length === 3) {\r\n      // Get applications\r\n      result = this.zabbix.getApps(template.group, template.host, template.app);\r\n    } else if (parts.length === 2) {\r\n      // Get hosts\r\n      result = this.zabbix.getHosts(template.group, template.host);\r\n    } else if (parts.length === 1) {\r\n      // Get groups\r\n      result = this.zabbix.getGroups(template.group);\r\n    } else {\r\n      result = Promise.resolve([]);\r\n    }\r\n\r\n    return result.then(metrics => {\r\n      return _.map(metrics, formatMetric);\r\n    });\r\n  }\r\n\r\n  /////////////////\r\n  // Annotations //\r\n  /////////////////\r\n\r\n  annotationQuery(options) {\r\n    var timeFrom = Math.ceil(dateMath.parse(options.rangeRaw.from) / 1000);\r\n    var timeTo = Math.ceil(dateMath.parse(options.rangeRaw.to) / 1000);\r\n    var annotation = options.annotation;\r\n    var showOkEvents = annotation.showOkEvents ? c.SHOW_ALL_EVENTS : c.SHOW_OK_EVENTS;\r\n\r\n    // Show all triggers\r\n    let triggersOptions = {\r\n      showTriggers: c.SHOW_ALL_TRIGGERS,\r\n      hideHostsInMaintenance: false\r\n    };\r\n\r\n    var getTriggers = this.zabbix.getTriggers(this.replaceTemplateVars(annotation.group, {}),\r\n                                              this.replaceTemplateVars(annotation.host, {}),\r\n                                              this.replaceTemplateVars(annotation.application, {}),\r\n                                              triggersOptions);\r\n\r\n    return getTriggers.then(triggers => {\r\n\r\n      // Filter triggers by description\r\n      let triggerName = this.replaceTemplateVars(annotation.trigger, {});\r\n      if (utils.isRegex(triggerName)) {\r\n        triggers = _.filter(triggers, trigger => {\r\n          return utils.buildRegex(triggerName).test(trigger.description);\r\n        });\r\n      } else if (triggerName) {\r\n        triggers = _.filter(triggers, trigger => {\r\n          return trigger.description === triggerName;\r\n        });\r\n      }\r\n\r\n      // Remove events below the chose severity\r\n      triggers = _.filter(triggers, trigger => {\r\n        return Number(trigger.priority) >= Number(annotation.minseverity);\r\n      });\r\n\r\n      var objectids = _.map(triggers, 'triggerid');\r\n      return this.zabbix\r\n        .getEvents(objectids, timeFrom, timeTo, showOkEvents)\r\n        .then(events => {\r\n          var indexedTriggers = _.keyBy(triggers, 'triggerid');\r\n\r\n          // Hide acknowledged events if option enabled\r\n          if (annotation.hideAcknowledged) {\r\n            events = _.filter(events, event => {\r\n              return !event.acknowledges.length;\r\n            });\r\n          }\r\n\r\n          return _.map(events, event => {\r\n            let tags;\r\n            if (annotation.showHostname) {\r\n              tags = _.map(event.hosts, 'name');\r\n            }\r\n\r\n            // Show event type (OK or Problem)\r\n            let title = Number(event.value) ? 'Problem' : 'OK';\r\n\r\n            let formatted_acknowledges = utils.formatAcknowledges(event.acknowledges);\r\n            return {\r\n              annotation: annotation,\r\n              time: event.clock * 1000,\r\n              title: title,\r\n              tags: tags,\r\n              text: indexedTriggers[event.objectid].description + formatted_acknowledges\r\n            };\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get triggers and its details for panel's targets\r\n   * Returns alert state ('ok' if no fired triggers, or 'alerting' if at least 1 trigger is fired)\r\n   * or empty object if no related triggers are finded.\r\n   */\r\n  alertQuery(options) {\r\n    let enabled_targets = filterEnabledTargets(options.targets);\r\n    let getPanelItems = _.map(enabled_targets, t => {\r\n      let target = _.cloneDeep(t);\r\n      this.replaceTargetVariables(target, options);\r\n      return this.zabbix.getItemsFromTarget(target, {itemtype: 'num'});\r\n    });\r\n\r\n    return Promise.all(getPanelItems)\r\n    .then(results => {\r\n      let items = _.flatten(results);\r\n      let itemids = _.map(items, 'itemid');\r\n\r\n      return this.zabbix.getAlerts(itemids);\r\n    })\r\n    .then(triggers => {\r\n      triggers = _.filter(triggers, trigger => {\r\n        return trigger.priority >= this.alertingMinSeverity;\r\n      });\r\n\r\n      if (!triggers || triggers.length === 0) {\r\n        return {};\r\n      }\r\n\r\n      let state = 'ok';\r\n\r\n      let firedTriggers = _.filter(triggers, {value: '1'});\r\n      if (firedTriggers.length) {\r\n        state = 'alerting';\r\n      }\r\n\r\n      let thresholds = _.map(triggers, trigger => {\r\n        return getTriggerThreshold(trigger.expression);\r\n      });\r\n\r\n      return {\r\n        panelId: options.panelId,\r\n        state: state,\r\n        thresholds: thresholds\r\n      };\r\n    });\r\n  }\r\n\r\n  // Replace template variables\r\n  replaceTargetVariables(target, options) {\r\n    let parts = ['group', 'host', 'application', 'item'];\r\n    _.forEach(parts, p => {\r\n      if (target[p] && target[p].filter) {\r\n        target[p].filter = this.replaceTemplateVars(target[p].filter, options.scopedVars);\r\n      }\r\n    });\r\n    target.textFilter = this.replaceTemplateVars(target.textFilter, options.scopedVars);\r\n\r\n    _.forEach(target.functions, func => {\r\n      func.params = _.map(func.params, param => {\r\n        if (typeof param === 'number') {\r\n          return +this.templateSrv.replace(param.toString(), options.scopedVars);\r\n        } else {\r\n          return this.templateSrv.replace(param, options.scopedVars);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  isUseTrends(timeRange) {\r\n    let [timeFrom, timeTo] = timeRange;\r\n    let useTrendsFrom = Math.ceil(dateMath.parse('now-' + this.trendsFrom) / 1000);\r\n    let useTrendsRange = Math.ceil(utils.parseInterval(this.trendsRange) / 1000);\r\n    let useTrends = this.trends && (\r\n      (timeFrom <= useTrendsFrom) ||\r\n      (timeTo - timeFrom >= useTrendsRange)\r\n    );\r\n    return useTrends;\r\n  }\r\n}\r\n\r\nfunction bindFunctionDefs(functionDefs, category) {\r\n  var aggregationFunctions = _.map(metricFunctions.getCategories()[category], 'name');\r\n  var aggFuncDefs = _.filter(functionDefs, function(func) {\r\n    return _.includes(aggregationFunctions, func.def.name);\r\n  });\r\n\r\n  return _.map(aggFuncDefs, function(func) {\r\n    var funcInstance = metricFunctions.createFuncInstance(func.def, func.params);\r\n    return funcInstance.bindFunction(dataProcessor.metricFunctions);\r\n  });\r\n}\r\n\r\nfunction getConsolidateBy(target) {\r\n  let consolidateBy = 'avg';\r\n  let funcDef = _.find(target.functions, func => {\r\n    return func.def.name === 'consolidateBy';\r\n  });\r\n  if (funcDef && funcDef.params && funcDef.params.length) {\r\n    consolidateBy = funcDef.params[0];\r\n  }\r\n  return consolidateBy;\r\n}\r\n\r\nfunction downsampleSeries(timeseries_data, options) {\r\n  let defaultAgg = dataProcessor.aggregationFunctions['avg'];\r\n  let consolidateByFunc = dataProcessor.aggregationFunctions[options.consolidateBy] || defaultAgg;\r\n  return _.map(timeseries_data, timeseries => {\r\n    if (timeseries.datapoints.length > options.maxDataPoints) {\r\n      timeseries.datapoints = dataProcessor\r\n        .groupBy(options.interval, consolidateByFunc, timeseries.datapoints);\r\n    }\r\n    return timeseries;\r\n  });\r\n}\r\n\r\nfunction formatMetric(metricObj) {\r\n  return {\r\n    text: metricObj.name,\r\n    expandable: false\r\n  };\r\n}\r\n\r\n/**\r\n * Custom formatter for template variables.\r\n * Default Grafana \"regex\" formatter returns\r\n * value1|value2\r\n * This formatter returns\r\n * (value1|value2)\r\n * This format needed for using in complex regex with\r\n * template variables, for example\r\n * /CPU $cpu_item.*time/ where $cpu_item is system,user,iowait\r\n */\r\nfunction zabbixTemplateFormat(value) {\r\n  if (typeof value === 'string') {\r\n    return utils.escapeRegex(value);\r\n  }\r\n\r\n  var escapedValues = _.map(value, utils.escapeRegex);\r\n  return '(' + escapedValues.join('|') + ')';\r\n}\r\n\r\nfunction zabbixItemIdsTemplateFormat(value) {\r\n  if (typeof value === 'string') {\r\n    return value;\r\n  }\r\n  return value.join(',');\r\n}\r\n\r\n/**\r\n * If template variables are used in request, replace it using regex format\r\n * and wrap with '/' for proper multi-value work. Example:\r\n * $variable selected as a, b, c\r\n * We use filter $variable\r\n * $variable    -> a|b|c    -> /a|b|c/\r\n * /$variable/  -> /a|b|c/  -> /a|b|c/\r\n */\r\nfunction replaceTemplateVars(templateSrv, target, scopedVars) {\r\n  var replacedTarget = templateSrv.replace(target, scopedVars, zabbixTemplateFormat);\r\n  if (target !== replacedTarget && !utils.isRegex(replacedTarget)) {\r\n    replacedTarget = '/^' + replacedTarget + '$/';\r\n  }\r\n  return replacedTarget;\r\n}\r\n\r\n// Apply function one by one:\r\n// sequence([a(), b(), c()]) = c(b(a()));\r\nfunction sequence(funcsArray) {\r\n  return function(result) {\r\n    for (var i = 0; i < funcsArray.length; i++) {\r\n      result = funcsArray[i].call(this, result);\r\n    }\r\n    return result;\r\n  };\r\n}\r\n\r\nfunction filterEnabledTargets(targets) {\r\n  return _.filter(targets, target => {\r\n    return !(target.hide || !target.group || !target.host || !target.item);\r\n  });\r\n}\r\n\r\nfunction getTriggerThreshold(expression) {\r\n  let thresholdPattern = /.*[<>]([\\d\\.]+)/;\r\n  let finded_thresholds = expression.match(thresholdPattern);\r\n  if (finded_thresholds && finded_thresholds.length >= 2) {\r\n    let threshold = finded_thresholds[1];\r\n    threshold = Number(threshold);\r\n    return threshold;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport {ZabbixAPIDatasource, zabbixTemplateFormat};\r\n\r\n// Fix for backward compatibility with lodash 2.4\r\nif (!_.includes) {_.includes = _.contains;}\r\nif (!_.keyBy) {_.keyBy = _.indexBy;}\r\n"]}