{"version":3,"sources":["../../src/datasource-zabbix/responseHandler.js"],"names":["convertHistory","history","items","addHostName","convertPointCallback","grouped_history","_","groupBy","hosts","uniqBy","flatten","map","hist","itemid","item","find","alias","name","keys","length","host","hostid","target","datapoints","handleHistory","convertHistoryPoint","handleTrends","valueType","partial","convertTrendPoint","handleText","convertTextCallback","convertText","point","value","textFilter","extractText","useCaptureGroups","clock","Math","round","ns","str","pattern","extractPattern","RegExp","extractedValue","exec","handleSLAResponse","itservice","slaProperty","slaObject","targetSLA","serviceid","sla","property","targetStatus","parseInt","status","to","from","Number","value_min","value_max","value_avg","value_sum","value_count","uniq"],"mappings":"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","file":"responseHandler.js","sourcesContent":["import _ from 'lodash';\r\n\r\n/**\r\n * Convert Zabbix API history.get response to Grafana format\r\n *\r\n * @return {Array}            Array of timeseries in Grafana format\r\n *                            {\r\n *                               target: \"Metric name\",\r\n *                               datapoints: [[<value>, <unixtime>], ...]\r\n *                            }\r\n */\r\nfunction convertHistory(history, items, addHostName, convertPointCallback) {\r\n  /**\r\n   * Response should be in the format:\r\n   * data: [\r\n   *          {\r\n   *             target: \"Metric name\",\r\n   *             datapoints: [[<value>, <unixtime>], ...]\r\n   *          }, ...\r\n   *       ]\r\n   */\r\n\r\n  // Group history by itemid\r\n  var grouped_history = _.groupBy(history, 'itemid');\r\n  var hosts = _.uniqBy(_.flatten(_.map(items, 'hosts')), 'hostid');  //uniqBy is needed to deduplicate\r\n\r\n  return _.map(grouped_history, function(hist, itemid) {\r\n    var item = _.find(items, {'itemid': itemid});\r\n    var alias = item.name;\r\n    if (_.keys(hosts).length > 1 && addHostName) {   //only when actual multi hosts selected\r\n      var host = _.find(hosts, {'hostid': item.hostid});\r\n      alias = host.name + \": \" + alias;\r\n    }\r\n    return {\r\n      target: alias,\r\n      datapoints: _.map(hist, convertPointCallback)\r\n    };\r\n  });\r\n}\r\n\r\nfunction handleHistory(history, items, addHostName = true) {\r\n  return convertHistory(history, items, addHostName, convertHistoryPoint);\r\n}\r\n\r\nfunction handleTrends(history, items, valueType, addHostName = true) {\r\n  var convertPointCallback = _.partial(convertTrendPoint, valueType);\r\n  return convertHistory(history, items, addHostName, convertPointCallback);\r\n}\r\n\r\nfunction handleText(history, items, target, addHostName = true) {\r\n  let convertTextCallback = _.partial(convertText, target);\r\n  return convertHistory(history, items, addHostName, convertTextCallback);\r\n}\r\n\r\nfunction convertText(target, point) {\r\n  let value = point.value;\r\n\r\n  // Regex-based extractor\r\n  if (target.textFilter) {\r\n    value = extractText(point.value, target.textFilter, target.useCaptureGroups);\r\n  }\r\n\r\n  return [\r\n    value,\r\n    point.clock * 1000 + Math.round(point.ns / 1000000)\r\n  ];\r\n}\r\n\r\nfunction extractText(str, pattern, useCaptureGroups) {\r\n  let extractPattern = new RegExp(pattern);\r\n  let extractedValue = extractPattern.exec(str);\r\n  if (extractedValue) {\r\n    if (useCaptureGroups) {\r\n      extractedValue = extractedValue[1];\r\n    } else {\r\n      extractedValue = extractedValue[0];\r\n    }\r\n  }\r\n  return extractedValue;\r\n}\r\n\r\nfunction handleSLAResponse(itservice, slaProperty, slaObject) {\r\n  var targetSLA = slaObject[itservice.serviceid].sla[0];\r\n  if (slaProperty.property === 'status') {\r\n    var targetStatus = parseInt(slaObject[itservice.serviceid].status);\r\n    return {\r\n      target: itservice.name + ' ' + slaProperty.name,\r\n      datapoints: [\r\n        [targetStatus, targetSLA.to * 1000]\r\n      ]\r\n    };\r\n  } else {\r\n    return {\r\n      target: itservice.name + ' ' + slaProperty.name,\r\n      datapoints: [\r\n        [targetSLA[slaProperty.property], targetSLA.from * 1000],\r\n        [targetSLA[slaProperty.property], targetSLA.to * 1000]\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\nfunction convertHistoryPoint(point) {\r\n  // Value must be a number for properly work\r\n  return [\r\n    Number(point.value),\r\n    point.clock * 1000 + Math.round(point.ns / 1000000)\r\n  ];\r\n}\r\n\r\nfunction convertTrendPoint(valueType, point) {\r\n  var value;\r\n  switch (valueType) {\r\n    case \"min\":\r\n      value = point.value_min;\r\n      break;\r\n    case \"max\":\r\n      value = point.value_max;\r\n      break;\r\n    case \"avg\":\r\n      value = point.value_avg;\r\n      break;\r\n    case \"sum\":\r\n      value = point.value_sum;\r\n      break;\r\n    case \"count\":\r\n      value = point.value_count;\r\n      break;\r\n    default:\r\n      value = point.value_avg;\r\n  }\r\n\r\n  return [\r\n    Number(value),\r\n    point.clock * 1000\r\n  ];\r\n}\r\n\r\nexport default {\r\n  handleHistory: handleHistory,\r\n  convertHistory: convertHistory,\r\n  handleTrends: handleTrends,\r\n  handleText: handleText,\r\n  handleSLAResponse: handleSLAResponse\r\n};\r\n\r\n// Fix for backward compatibility with lodash 2.4\r\nif (!_.uniqBy) {_.uniqBy = _.uniq;}\r\n"]}