{"version":3,"sources":["../../src/datasource-zabbix/timeseries.js"],"names":["downsample","datapoints","time_to","ms_interval","func","downsampledSeries","timeWindow","from","to","points_sum","points_num","value_avg","frame","i","length","push","_","max","min","reverse","groupBy","interval","groupByCallback","utils","parseInterval","frames","point","Math","floor","grouped","mapValues","points","map","sortByTime","value","timestamp","Number","groupBy_perf","grouped_series","frame_values","frame_value","frame_ts","getPointTimeFrame","POINT_TIMESTAMP","point_frame_ts","POINT_VALUE","sumSeries","timeseries","new_timestamps","uniq","flatten","sortBy","interpolated_timeseries","series","fillZeroes","timestamps","new_points","difference","new_series","concat","each","interpolateSeries","new_timeseries","sum","j","scale","factor","scale_perf","delta","newSeries","deltaValue","rate","point_prev","valueDelta","timeDelta","simpleMovingAverage","n","sma","w_sum","w_avg","w_count","expMovingAverage","ema","ema_prev","ema_cur","a","PERCENTIL","values","sorted","COUNT","SUM","AVERAGE","values_non_null","getNonNullValues","MIN","MAX","MEDIAN","prepend","append","new_point","left","right","findNearestLeft","findNearestRight","linearInterpolation","pointIndex","exportedFunctions"],"mappings":"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","file":"timeseries.js","sourcesContent":["/**\r\n * timeseries.js\r\n *\r\n * This module contains functions for working with time series.\r\n *\r\n * datapoints - array of points where point is [value, timestamp]. In almost all cases (if other wasn't\r\n * explicitly said) we assume datapoints are sorted by timestamp. Timestamp is the number of milliseconds\r\n * since 1 January 1970 00:00:00 UTC.\r\n *\r\n */\r\n\r\nimport _ from 'lodash';\r\nimport * as utils from './utils';\r\n\r\nconst POINT_VALUE = 0;\r\nconst POINT_TIMESTAMP = 1;\r\n\r\n/**\r\n * Downsample time series by using given function (avg, min, max).\r\n */\r\nfunction downsample(datapoints, time_to, ms_interval, func) {\r\n  var downsampledSeries = [];\r\n  var timeWindow = {\r\n    from: time_to * 1000 - ms_interval,\r\n    to: time_to * 1000\r\n  };\r\n\r\n  var points_sum = 0;\r\n  var points_num = 0;\r\n  var value_avg = 0;\r\n  var frame = [];\r\n\r\n  for (var i = datapoints.length - 1; i >= 0; i -= 1) {\r\n    if (timeWindow.from < datapoints[i][1] && datapoints[i][1] <= timeWindow.to) {\r\n      points_sum += datapoints[i][0];\r\n      points_num++;\r\n      frame.push(datapoints[i][0]);\r\n    }\r\n    else {\r\n      value_avg = points_num ? points_sum / points_num : 0;\r\n\r\n      if (func === \"max\") {\r\n        downsampledSeries.push([_.max(frame), timeWindow.to]);\r\n      }\r\n      else if (func === \"min\") {\r\n        downsampledSeries.push([_.min(frame), timeWindow.to]);\r\n      }\r\n\r\n      // avg by default\r\n      else {\r\n        downsampledSeries.push([value_avg, timeWindow.to]);\r\n      }\r\n\r\n      // Shift time window\r\n      timeWindow.to = timeWindow.from;\r\n      timeWindow.from -= ms_interval;\r\n\r\n      points_sum = 0;\r\n      points_num = 0;\r\n      frame = [];\r\n\r\n      // Process point again\r\n      i++;\r\n    }\r\n  }\r\n  return downsampledSeries.reverse();\r\n}\r\n\r\n/**\r\n * Group points by given time interval\r\n * datapoints: [[<value>, <unixtime>], ...]\r\n */\r\nfunction groupBy(datapoints, interval, groupByCallback) {\r\n  var ms_interval = utils.parseInterval(interval);\r\n\r\n  // Calculate frame timestamps\r\n  var frames = _.groupBy(datapoints, function (point) {\r\n    // Calculate time for group of points\r\n    return Math.floor(point[1] / ms_interval) * ms_interval;\r\n  });\r\n\r\n  // frame: { '<unixtime>': [[<value>, <unixtime>], ...] }\r\n  // return [{ '<unixtime>': <value> }, { '<unixtime>': <value> }, ...]\r\n  var grouped = _.mapValues(frames, function (frame) {\r\n    var points = _.map(frame, function (point) {\r\n      return point[0];\r\n    });\r\n    return groupByCallback(points);\r\n  });\r\n\r\n  // Convert points to Grafana format\r\n  return sortByTime(_.map(grouped, function (value, timestamp) {\r\n    return [Number(value), Number(timestamp)];\r\n  }));\r\n}\r\n\r\nfunction groupBy_perf(datapoints, interval, groupByCallback) {\r\n  if (datapoints.length === 0) {\r\n    return [];\r\n  }\r\n\r\n  let ms_interval = utils.parseInterval(interval);\r\n  let grouped_series = [];\r\n  let frame_values = [];\r\n  let frame_value;\r\n  let frame_ts = datapoints.length ? getPointTimeFrame(datapoints[0][POINT_TIMESTAMP], ms_interval) : 0;\r\n  let point_frame_ts = frame_ts;\r\n  let point;\r\n\r\n  for (let i=0; i < datapoints.length; i++) {\r\n    point = datapoints[i];\r\n    point_frame_ts = getPointTimeFrame(point[POINT_TIMESTAMP], ms_interval);\r\n    if (point_frame_ts === frame_ts) {\r\n      frame_values.push(point[POINT_VALUE]);\r\n    } else if (point_frame_ts > frame_ts) {\r\n      frame_value = groupByCallback(frame_values);\r\n      grouped_series.push([frame_value, frame_ts]);\r\n\r\n      // Move frame window to next non-empty interval and fill empty by null\r\n      frame_ts += ms_interval;\r\n      while (frame_ts < point_frame_ts) {\r\n        grouped_series.push([null, frame_ts]);\r\n        frame_ts += ms_interval;\r\n      }\r\n      frame_values = [point[POINT_VALUE]];\r\n    }\r\n  }\r\n\r\n  frame_value = groupByCallback(frame_values);\r\n  grouped_series.push([frame_value, frame_ts]);\r\n\r\n  return grouped_series;\r\n}\r\n\r\n/**\r\n * Summarize set of time series into one.\r\n * @param {datapoints[]} timeseries array of time series\r\n */\r\nfunction sumSeries(timeseries) {\r\n\r\n  // Calculate new points for interpolation\r\n  var new_timestamps = _.uniq(_.map(_.flatten(timeseries, true), function (point) {\r\n    return point[1];\r\n  }));\r\n  new_timestamps = _.sortBy(new_timestamps);\r\n\r\n  var interpolated_timeseries = _.map(timeseries, function (series) {\r\n    series = fillZeroes(series, new_timestamps);\r\n    var timestamps = _.map(series, function (point) {\r\n      return point[1];\r\n    });\r\n    var new_points = _.map(_.difference(new_timestamps, timestamps), function (timestamp) {\r\n      return [null, timestamp];\r\n    });\r\n    var new_series = series.concat(new_points);\r\n    return sortByTime(new_series);\r\n  });\r\n\r\n  _.each(interpolated_timeseries, interpolateSeries);\r\n\r\n  var new_timeseries = [];\r\n  var sum;\r\n  for (var i = new_timestamps.length - 1; i >= 0; i--) {\r\n    sum = 0;\r\n    for (var j = interpolated_timeseries.length - 1; j >= 0; j--) {\r\n      sum += interpolated_timeseries[j][i][0];\r\n    }\r\n    new_timeseries.push([sum, new_timestamps[i]]);\r\n  }\r\n\r\n  return sortByTime(new_timeseries);\r\n}\r\n\r\nfunction scale(datapoints, factor) {\r\n  return _.map(datapoints, point => {\r\n    return [\r\n      point[0] * factor,\r\n      point[1]\r\n    ];\r\n  });\r\n}\r\n\r\nfunction scale_perf(datapoints, factor) {\r\n  for (let i = 0; i < datapoints.length; i++) {\r\n    datapoints[i] = [\r\n      datapoints[i][POINT_VALUE] * factor,\r\n      datapoints[i][POINT_TIMESTAMP]\r\n    ];\r\n  }\r\n\r\n  return datapoints;\r\n}\r\n\r\n/**\r\n * Simple delta. Calculate value delta between points.\r\n * @param {*} datapoints\r\n */\r\nfunction delta(datapoints) {\r\n  let newSeries = [];\r\n  let deltaValue;\r\n  for (var i = 1; i < datapoints.length; i++) {\r\n    deltaValue = datapoints[i][0] - datapoints[i - 1][0];\r\n    newSeries.push([deltaValue, datapoints[i][1]]);\r\n  }\r\n  return newSeries;\r\n}\r\n\r\n/**\r\n * Calculates rate per second. Resistant to counter reset.\r\n * @param {*} datapoints\r\n */\r\nfunction rate(datapoints) {\r\n  let newSeries = [];\r\n  let point, point_prev;\r\n  let valueDelta = 0;\r\n  let timeDelta = 0;\r\n  for (let i = 1; i < datapoints.length; i++) {\r\n    point = datapoints[i];\r\n    point_prev = datapoints[i - 1];\r\n\r\n    // Convert ms to seconds\r\n    timeDelta = (point[POINT_TIMESTAMP] - point_prev[POINT_TIMESTAMP]) / 1000;\r\n\r\n    // Handle counter reset - use previous value\r\n    if (point[POINT_VALUE] >= point_prev[POINT_VALUE]) {\r\n      valueDelta = (point[POINT_VALUE] - point_prev[POINT_VALUE]) / timeDelta;\r\n    }\r\n\r\n    newSeries.push([valueDelta, point[POINT_TIMESTAMP]]);\r\n  }\r\n  return newSeries;\r\n}\r\n\r\nfunction simpleMovingAverage(datapoints, n) {\r\n  let sma = [];\r\n  let w_sum;\r\n  let w_avg = null;\r\n  let w_count = 0;\r\n\r\n  // Initial window\r\n  for (let j = n; j > 0; j--) {\r\n    if (datapoints[n - j][POINT_VALUE] !== null) {\r\n      w_avg += datapoints[n - j][POINT_VALUE];\r\n      w_count++;\r\n    }\r\n  }\r\n  if (w_count > 0) {\r\n    w_avg = w_avg / w_count;\r\n  } else {\r\n    w_avg = null;\r\n  }\r\n  sma.push([w_avg, datapoints[n - 1][POINT_TIMESTAMP]]);\r\n\r\n  for (let i = n; i < datapoints.length; i++) {\r\n    // Insert next value\r\n    if (datapoints[i][POINT_VALUE] !== null) {\r\n      w_sum = w_avg * w_count;\r\n      w_avg = (w_sum + datapoints[i][POINT_VALUE]) / (w_count + 1);\r\n      w_count++;\r\n    }\r\n    // Remove left side point\r\n    if (datapoints[i - n][POINT_VALUE] !== null) {\r\n      w_sum = w_avg * w_count;\r\n      if (w_count > 1) {\r\n        w_avg = (w_sum - datapoints[i - n][POINT_VALUE]) / (w_count - 1);\r\n        w_count--;\r\n      } else {\r\n        w_avg = null;\r\n        w_count = 0;\r\n      }\r\n    }\r\n    sma.push([w_avg, datapoints[i][POINT_TIMESTAMP]]);\r\n  }\r\n  return sma;\r\n}\r\n\r\nfunction expMovingAverage(datapoints, n) {\r\n  let ema = [datapoints[0]];\r\n  let ema_prev = datapoints[0][POINT_VALUE];\r\n  let ema_cur;\r\n  let a;\r\n\r\n  if (n > 1) {\r\n    // Calculate a from window size\r\n    a = 2 / (n + 1);\r\n\r\n    // Initial window, use simple moving average\r\n    let w_avg = null;\r\n    let w_count = 0;\r\n    for (let j = n; j > 0; j--) {\r\n      if (datapoints[n - j][POINT_VALUE] !== null) {\r\n        w_avg += datapoints[n - j][POINT_VALUE];\r\n        w_count++;\r\n      }\r\n    }\r\n    if (w_count > 0) {\r\n      w_avg = w_avg / w_count;\r\n      // Actually, we should set timestamp from datapoints[n-1] and start calculation of EMA from n.\r\n      // But in order to start EMA from first point (not from Nth) we should expand time range and request N additional\r\n      // points outside left side of range. We can't do that, so this trick is used for pretty view of first N points.\r\n      // We calculate AVG for first N points, but then start from 2nd point, not from Nth. In general, it means we\r\n      // assume that previous N values (0-N, 0-(N-1), ..., 0-1) have the same average value as a first N values.\r\n      ema = [[w_avg, datapoints[0][POINT_TIMESTAMP]]];\r\n      ema_prev = w_avg;\r\n      n = 1;\r\n    }\r\n  } else {\r\n    // Use predefined a and start from 1st point (use it as initial EMA value)\r\n    a = n;\r\n    n = 1;\r\n  }\r\n\r\n  for (let i = n; i < datapoints.length; i++) {\r\n    if (datapoints[i][POINT_VALUE] !== null) {\r\n      ema_cur = a * datapoints[i][POINT_VALUE] + (1 - a) * ema_prev;\r\n      ema_prev = ema_cur;\r\n      ema.push([ema_cur, datapoints[i][POINT_TIMESTAMP]]);\r\n    } else {\r\n      ema.push([null, datapoints[i][POINT_TIMESTAMP]]);\r\n    }\r\n  }\r\n  return ema;\r\n}\r\n\r\nfunction PERCENTIL(n, values) {\r\n  var sorted = _.sortBy(values);\r\n  return sorted[Math.floor(sorted.length * n / 100)];\r\n}\r\n\r\nfunction COUNT(values) {\r\n  return values.length;\r\n}\r\n\r\nfunction SUM(values) {\r\n  var sum = null;\r\n  for (let i = 0; i < values.length; i++) {\r\n    if (values[i] !== null) {\r\n      sum += values[i];\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\nfunction AVERAGE(values) {\r\n  let values_non_null = getNonNullValues(values);\r\n  if (values_non_null.length === 0) {\r\n    return null;\r\n  }\r\n  return SUM(values_non_null) / values_non_null.length;\r\n}\r\n\r\nfunction getNonNullValues(values) {\r\n  let values_non_null = [];\r\n  for (let i = 0; i < values.length; i++) {\r\n    if (values[i] !== null) {\r\n      values_non_null.push(values[i]);\r\n    }\r\n  }\r\n  return values_non_null;\r\n}\r\n\r\nfunction MIN(values) {\r\n  return _.min(values);\r\n}\r\n\r\nfunction MAX(values) {\r\n  return _.max(values);\r\n}\r\n\r\nfunction MEDIAN(values) {\r\n  var sorted = _.sortBy(values);\r\n  return sorted[Math.floor(sorted.length / 2)];\r\n}\r\n\r\n///////////////////////\r\n// Utility functions //\r\n///////////////////////\r\n\r\n/**\r\n * For given point calculate corresponding time frame.\r\n *\r\n * |__*_|_*__|___*| -> |*___|*___|*___|\r\n *\r\n * @param {*} timestamp\r\n * @param {*} ms_interval\r\n */\r\nfunction getPointTimeFrame(timestamp, ms_interval) {\r\n  return Math.floor(timestamp / ms_interval) * ms_interval;\r\n}\r\n\r\nfunction sortByTime(series) {\r\n  return _.sortBy(series, function (point) {\r\n    return point[1];\r\n  });\r\n}\r\n\r\n/**\r\n * Fill empty front and end of series by zeroes.\r\n *\r\n * |   ***   |    |   ***   |\r\n * |___   ___| -> |***   ***|\r\n * @param {*} series\r\n * @param {*} timestamps\r\n */\r\nfunction fillZeroes(series, timestamps) {\r\n  let prepend = [];\r\n  let append = [];\r\n  let new_point;\r\n  for (let i = 0; i < timestamps.length; i++) {\r\n    if (timestamps[i] < series[0][POINT_TIMESTAMP]) {\r\n      new_point = [0, timestamps[i]];\r\n      prepend.push(new_point);\r\n    } else if (timestamps[i] > series[series.length - 1][POINT_TIMESTAMP]) {\r\n      new_point = [0, timestamps[i]];\r\n      append.push(new_point);\r\n    }\r\n  }\r\n  return _.concat(_.concat(prepend, series), append);\r\n}\r\n\r\n/**\r\n * Interpolate series with gaps\r\n */\r\nfunction interpolateSeries(series) {\r\n  var left, right;\r\n\r\n  // Interpolate series\r\n  for (var i = series.length - 1; i >= 0; i--) {\r\n    if (!series[i][0]) {\r\n      left = findNearestLeft(series, i);\r\n      right = findNearestRight(series, i);\r\n      if (!left) {\r\n        left = right;\r\n      }\r\n      if (!right) {\r\n        right = left;\r\n      }\r\n      series[i][0] = linearInterpolation(series[i][1], left, right);\r\n    }\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction linearInterpolation(timestamp, left, right) {\r\n  if (left[1] === right[1]) {\r\n    return (left[0] + right[0]) / 2;\r\n  } else {\r\n    return (left[0] + (right[0] - left[0]) / (right[1] - left[1]) * (timestamp - left[1]));\r\n  }\r\n}\r\n\r\nfunction findNearestRight(series, pointIndex) {\r\n  for (var i = pointIndex; i < series.length; i++) {\r\n    if (series[i][0] !== null) {\r\n      return series[i];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction findNearestLeft(series, pointIndex) {\r\n  for (var i = pointIndex; i > 0; i--) {\r\n    if (series[i][0] !== null) {\r\n      return series[i];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n////////////\r\n// Export //\r\n////////////\r\n\r\nconst exportedFunctions = {\r\n  downsample,\r\n  groupBy,\r\n  groupBy_perf,\r\n  sumSeries,\r\n  scale,\r\n  scale_perf,\r\n  delta,\r\n  rate,\r\n  simpleMovingAverage,\r\n  expMovingAverage,\r\n  SUM,\r\n  COUNT,\r\n  AVERAGE,\r\n  MIN,\r\n  MAX,\r\n  MEDIAN,\r\n  PERCENTIL,\r\n  sortByTime\r\n};\r\n\r\nexport default exportedFunctions;\r\n"]}