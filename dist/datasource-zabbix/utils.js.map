{"version":3,"sources":["../../src/datasource-zabbix/utils.js"],"names":["expandItemName","name","key","key_params_str","substring","indexOf","lastIndexOf","key_params","splitKeyParams","i","length","replace","expandItems","items","_","forEach","item","key_","paramStr","params","quoted","in_array","split_symbol","param","symbol","push","containsMacro","itemName","MACRO_PATTERN","test","replaceMacro","macros","item_macros","match","host_macros","filter","m","hostid","macro_def","find","macro","value","macro_value","macro_regex","RegExp","escapeMacro","splitTemplateQuery","query","splitPattern","split","isContainsBraces","result","map","trim","part","bracesPattern","isRegex","str","regexPattern","isTemplateVariable","templateVariables","variablePattern","variables","variable","includes","buildRegex","matches","pattern","flags","undefined","escapeRegex","parseInterval","interval","intervalPattern","momentInterval","exec","moment","duration","Number","valueOf","parseTimeShiftInterval","formatAcknowledges","acknowledges","formatted_acknowledges","each","ack","timestamp","unix","clock","format","alias","surname","message","concat","convertToZabbixAPIUrl","url","zabbixAPIUrlPattern","trimSlashPattern","callOnce","func","promiseKeeper","Promise","resolve","apply","arguments","then","contains"],"mappings":"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","file":"utils.js","sourcesContent":["import _ from 'lodash';\r\nimport moment from 'moment';\r\n\r\n/**\r\n * Expand Zabbix item name\r\n *\r\n * @param  {string} name item name, ie \"CPU $2 time\"\r\n * @param  {string} key  item key, ie system.cpu.util[,system,avg1]\r\n * @return {string}      expanded name, ie \"CPU system time\"\r\n */\r\nexport function expandItemName(name, key) {\r\n\r\n  // extract params from key:\r\n  // \"system.cpu.util[,system,avg1]\" --> [\"\", \"system\", \"avg1\"]\r\n  let key_params_str = key.substring(key.indexOf('[') + 1, key.lastIndexOf(']'));\r\n  let key_params = splitKeyParams(key_params_str);\r\n\r\n  // replace item parameters\r\n  for (let i = key_params.length; i >= 1; i--) {\r\n    name = name.replace('$' + i, key_params[i - 1]);\r\n  }\r\n  return name;\r\n}\r\n\r\nexport function expandItems(items) {\r\n  _.forEach(items, item => {\r\n    item.item = item.name;\r\n    item.name = expandItemName(item.item, item.key_);\r\n    return item;\r\n  });\r\n  return items;\r\n}\r\n\r\nfunction splitKeyParams(paramStr) {\r\n  let params = [];\r\n  let quoted = false;\r\n  let in_array = false;\r\n  let split_symbol = ',';\r\n  let param = '';\r\n\r\n  _.forEach(paramStr, symbol => {\r\n    if (symbol === '\"' && in_array) {\r\n      param += symbol;\r\n    } else if (symbol === '\"' && quoted) {\r\n      quoted = false;\r\n    } else if (symbol === '\"' && !quoted) {\r\n      quoted = true;\r\n    } else if (symbol === '[' && !quoted) {\r\n      in_array  = true;\r\n    } else if (symbol === ']' && !quoted) {\r\n      in_array = false;\r\n    } else if (symbol === split_symbol && !quoted && !in_array) {\r\n      params.push(param);\r\n      param = '';\r\n    } else {\r\n      param += symbol;\r\n    }\r\n  });\r\n\r\n  params.push(param);\r\n  return params;\r\n}\r\n\r\nconst MACRO_PATTERN = /{\\$[A-Z0-9_\\.]+}/g;\r\n\r\nexport function containsMacro(itemName) {\r\n  return MACRO_PATTERN.test(itemName);\r\n}\r\n\r\nexport function replaceMacro(item, macros) {\r\n  let itemName = item.name;\r\n  let item_macros = itemName.match(MACRO_PATTERN);\r\n  _.forEach(item_macros, macro => {\r\n    let host_macros = _.filter(macros, m => {\r\n      if (m.hostid) {\r\n        return m.hostid === item.hostid;\r\n      } else {\r\n        // Add global macros\r\n        return true;\r\n      }\r\n    });\r\n\r\n    let macro_def = _.find(host_macros, { macro: macro });\r\n    if (macro_def && macro_def.value) {\r\n      let macro_value = macro_def.value;\r\n      let macro_regex = new RegExp(escapeMacro(macro));\r\n      itemName = itemName.replace(macro_regex, macro_value);\r\n    }\r\n  });\r\n\r\n  return itemName;\r\n}\r\n\r\nfunction escapeMacro(macro) {\r\n  macro = macro.replace(/\\$/, '\\\\\\$');\r\n  return macro;\r\n}\r\n\r\n/**\r\n * Split template query to parts of zabbix entities\r\n * group.host.app.item -> [group, host, app, item]\r\n * {group}{host.com} -> [group, host.com]\r\n */\r\nexport function splitTemplateQuery(query) {\r\n  let splitPattern = /\\{[^\\{\\}]*\\}|\\{\\/.*\\/\\}/g;\r\n  let split;\r\n\r\n  if (isContainsBraces(query)) {\r\n    let result = query.match(splitPattern);\r\n    split = _.map(result, part => {\r\n      return _.trim(part, '{}');\r\n    });\r\n  } else {\r\n    split = query.split('.');\r\n  }\r\n\r\n  return split;\r\n}\r\n\r\nfunction isContainsBraces(query) {\r\n  let bracesPattern = /^\\{.+\\}$/;\r\n  return bracesPattern.test(query);\r\n}\r\n\r\n// Pattern for testing regex\r\nexport const regexPattern = /^\\/(.*)\\/([gmi]*)$/m;\r\n\r\nexport function isRegex(str) {\r\n  return regexPattern.test(str);\r\n}\r\n\r\nexport function isTemplateVariable(str, templateVariables) {\r\n  var variablePattern = /^\\$\\w+/;\r\n  if (variablePattern.test(str)) {\r\n    var variables = _.map(templateVariables, variable => {\r\n      return '$' + variable.name;\r\n    });\r\n    return _.includes(variables, str);\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function buildRegex(str) {\r\n  var matches = str.match(regexPattern);\r\n  var pattern = matches[1];\r\n  var flags = matches[2] !== \"\" ? matches[2] : undefined;\r\n  return new RegExp(pattern, flags);\r\n}\r\n\r\n// Need for template variables replace\r\n// From Grafana's templateSrv.js\r\nexport function escapeRegex(value) {\r\n  return value.replace(/[\\\\^$*+?.()|[\\]{}\\/]/g, '\\\\$&');\r\n}\r\n\r\nexport function parseInterval(interval) {\r\n  var intervalPattern = /(^[\\d]+)(y|M|w|d|h|m|s)/g;\r\n  var momentInterval = intervalPattern.exec(interval);\r\n  return moment.duration(Number(momentInterval[1]), momentInterval[2]).valueOf();\r\n}\r\n\r\nexport function parseTimeShiftInterval(interval) {\r\n  let intervalPattern = /^([\\+\\-]*)([\\d]+)(y|M|w|d|h|m|s)/g;\r\n  let momentInterval = intervalPattern.exec(interval);\r\n  let duration = 0;\r\n\r\n  if (momentInterval[1] === '+') {\r\n    duration = 0 - moment.duration(Number(momentInterval[2]), momentInterval[3]).valueOf();\r\n  } else {\r\n    duration = moment.duration(Number(momentInterval[2]), momentInterval[3]).valueOf();\r\n  }\r\n\r\n  return duration;\r\n}\r\n\r\n/**\r\n * Format acknowledges.\r\n *\r\n * @param  {array} acknowledges array of Zabbix acknowledge objects\r\n * @return {string} HTML-formatted table\r\n */\r\nexport function formatAcknowledges(acknowledges) {\r\n  if (acknowledges.length) {\r\n    var formatted_acknowledges = '<br><br>Acknowledges:<br><table><tr><td><b>Time</b></td>'\r\n      + '<td><b>User</b></td><td><b>Comments</b></td></tr>';\r\n    _.each(_.map(acknowledges, function (ack) {\r\n      var timestamp = moment.unix(ack.clock);\r\n      return '<tr><td><i>' + timestamp.format(\"DD MMM YYYY HH:mm:ss\") + '</i></td><td>' + ack.alias\r\n        + ' (' + ack.name + ' ' + ack.surname + ')' + '</td><td>' + ack.message + '</td></tr>';\r\n    }), function (ack) {\r\n      formatted_acknowledges = formatted_acknowledges.concat(ack);\r\n    });\r\n    formatted_acknowledges = formatted_acknowledges.concat('</table>');\r\n    return formatted_acknowledges;\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n\r\nexport function convertToZabbixAPIUrl(url) {\r\n  var zabbixAPIUrlPattern = /.*api_jsonrpc.php$/;\r\n  var trimSlashPattern = /(.*?)[\\/]*$/;\r\n  if (url.match(zabbixAPIUrlPattern)) {\r\n    return url;\r\n  } else {\r\n    return url.replace(trimSlashPattern, \"$1\");\r\n  }\r\n}\r\n\r\n/**\r\n * Wrap function to prevent multiple calls\r\n * when waiting for result.\r\n */\r\nexport function callOnce(func, promiseKeeper) {\r\n  return function() {\r\n    if (!promiseKeeper) {\r\n      promiseKeeper = Promise.resolve(\r\n        func.apply(this, arguments)\r\n        .then(result => {\r\n          promiseKeeper = null;\r\n          return result;\r\n        })\r\n      );\r\n    }\r\n    return promiseKeeper;\r\n  };\r\n}\r\n\r\n// Fix for backward compatibility with lodash 2.4\r\nif (!_.includes) {\r\n  _.includes = _.contains;\r\n}\r\n"]}