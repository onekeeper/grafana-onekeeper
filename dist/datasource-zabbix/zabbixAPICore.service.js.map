{"version":3,"sources":["../../src/datasource-zabbix/zabbixAPICore.service.js"],"names":["angular","ZabbixAPICoreService","backendSrv","api_url","method","params","options","auth","requestData","jsonrpc","id","Promise","reject","ZabbixAPIError","data","requestOptions","url","headers","basicAuth","withCredentials","Authorization","datasourceRequest","then","response","error","result","username","password","user","request","code","name","message","module","service"],"mappings":";;;;;;;;;;;;;;;AAIOA,a;;;;;;;;;;;;;;;;;;;;;AAEDC,0B;;AAEJ;AACA,sCAAYC,UAAZ,EAAwB;AAAA;;AACtB,eAAKA,UAAL,GAAkBA,UAAlB;AACD;;AAED;;;;;;;;kCAIQC,O,EAASC,M,EAAQC,M,EAAQC,O,EAASC,I,EAAM;AAC9C,gBAAIC,cAAc;AAChBC,uBAAS,KADO;AAEhBL,sBAAQA,MAFQ;AAGhBC,sBAAQA,MAHQ;AAIhBK,kBAAI;AAJY,aAAlB;;AAOA,gBAAIH,SAAS,EAAb,EAAiB;AACf;AACA,qBAAOI,QAAQC,MAAR,CAAe,IAAIC,cAAJ,CAAmB,EAACC,MAAM,iBAAP,EAAnB,CAAf,CAAP;AACD,aAHD,MAGO,IAAIP,IAAJ,EAAU;AACf;AACAC,0BAAYD,IAAZ,GAAmBA,IAAnB;AACD;;AAED,gBAAIQ,iBAAiB;AACnBX,sBAAQ,MADW;AAEnBY,mBAAKb,OAFc;AAGnBW,oBAAMN,WAHa;AAInBS,uBAAS;AACP,gCAAgB;AADT;AAJU,aAArB;;AASA;AACA,gBAAIX,QAAQY,SAAR,IAAqBZ,QAAQa,eAAjC,EAAkD;AAChDJ,6BAAeI,eAAf,GAAiC,IAAjC;AACD;AACD,gBAAIb,QAAQY,SAAZ,EAAuB;AACrBH,6BAAeE,OAAf,CAAuBG,aAAvB,GAAuCd,QAAQY,SAA/C;AACD;;AAED,mBAAO,KAAKG,iBAAL,CAAuBN,cAAvB,CAAP;AACD;;;4CAEiBA,c,EAAgB;AAChC,mBAAO,KAAKb,UAAL,CAAgBmB,iBAAhB,CAAkCN,cAAlC,EACNO,IADM,CACD,UAACC,QAAD,EAAc;AAClB,kBAAI,CAACA,SAAST,IAAd,EAAoB;AAClB,uBAAOH,QAAQC,MAAR,CAAe,IAAIC,cAAJ,CAAmB,EAACC,MAAM,wBAAP,EAAnB,CAAf,CAAP;AACD,eAFD,MAEO,IAAIS,SAAST,IAAT,CAAcU,KAAlB,EAAyB;;AAE9B;AACA,uBAAOb,QAAQC,MAAR,CAAe,IAAIC,cAAJ,CAAmBU,SAAST,IAAT,CAAcU,KAAjC,CAAf,CAAP;AACD;;AAED;AACA,qBAAOD,SAAST,IAAT,CAAcW,MAArB;AACD,aAZM,CAAP;AAaD;;;gCAMKtB,O,EAASuB,Q,EAAUC,Q,EAAUrB,O,EAAS;AAC1C,gBAAID,SAAS;AACXuB,oBAAMF,QADK;AAEXC,wBAAUA;AAFC,aAAb;AAIA,mBAAO,KAAKE,OAAL,CAAa1B,OAAb,EAAsB,YAAtB,EAAoCE,MAApC,EAA4CC,OAA5C,EAAqD,IAArD,CAAP;AACD;;;qCAMUH,O,EAASG,O,EAAS;AAC3B,mBAAO,KAAKuB,OAAL,CAAa1B,OAAb,EAAsB,iBAAtB,EAAyC,EAAzC,EAA6CG,OAA7C,CAAP;AACD;;;;;;gCAIUO,c;AACX,gCAAYW,KAAZ,EAAmB;AAAA;;AACjB,eAAKM,IAAL,GAAYN,MAAMM,IAAN,IAAc,IAA1B;AACA,eAAKC,IAAL,GAAYP,MAAMQ,OAAN,IAAiB,EAA7B;AACA,eAAKlB,IAAL,GAAYU,MAAMV,IAAN,IAAc,EAA1B;AACA,eAAKkB,OAAL,GAAe,0BAA0B,KAAKD,IAA/B,GAAsC,GAAtC,GAA4C,KAAKjB,IAAhE;AACD;;;;qCAEU;AACT,mBAAO,KAAKiB,IAAL,GAAY,GAAZ,GAAkB,KAAKjB,IAA9B;AACD;;;;;;;;AAGHd,cACGiC,MADH,CACU,kBADV,EAEGC,OAFH,CAEW,sBAFX,EAEmCjC,oBAFnC","file":"zabbixAPICore.service.js","sourcesContent":["/**\r\n * General Zabbix API methods\r\n */\r\n\r\nimport angular from 'angular';\r\n\r\nclass ZabbixAPICoreService {\r\n\r\n  /** @ngInject */\r\n  constructor(backendSrv) {\r\n    this.backendSrv = backendSrv;\r\n  }\r\n\r\n  /**\r\n   * Request data from Zabbix API\r\n   * @return {object}  response.result\r\n   */\r\n  request(api_url, method, params, options, auth) {\r\n    let requestData = {\r\n      jsonrpc: '2.0',\r\n      method: method,\r\n      params: params,\r\n      id: 1\r\n    };\r\n\r\n    if (auth === \"\") {\r\n      // Reject immediately if not authenticated\r\n      return Promise.reject(new ZabbixAPIError({data: \"Not authorised.\"}));\r\n    } else if (auth) {\r\n      // Set auth parameter only if it needed\r\n      requestData.auth = auth;\r\n    }\r\n\r\n    let requestOptions = {\r\n      method: 'POST',\r\n      url: api_url,\r\n      data: requestData,\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n\r\n    // Set request options for basic auth\r\n    if (options.basicAuth || options.withCredentials) {\r\n      requestOptions.withCredentials = true;\r\n    }\r\n    if (options.basicAuth) {\r\n      requestOptions.headers.Authorization = options.basicAuth;\r\n    }\r\n\r\n    return this.datasourceRequest(requestOptions);\r\n  }\r\n\r\n  datasourceRequest(requestOptions) {\r\n    return this.backendSrv.datasourceRequest(requestOptions)\r\n    .then((response) => {\r\n      if (!response.data) {\r\n        return Promise.reject(new ZabbixAPIError({data: \"General Error, no data\"}));\r\n      } else if (response.data.error) {\r\n\r\n        // Handle Zabbix API errors\r\n        return Promise.reject(new ZabbixAPIError(response.data.error));\r\n      }\r\n\r\n      // Success\r\n      return response.data.result;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get authentication token.\r\n   * @return {string}  auth token\r\n   */\r\n  login(api_url, username, password, options) {\r\n    let params = {\r\n      user: username,\r\n      password: password\r\n    };\r\n    return this.request(api_url, 'user.login', params, options, null);\r\n  }\r\n\r\n  /**\r\n   * Get Zabbix API version\r\n   * Matches the version of Zabbix starting from Zabbix 2.0.4\r\n   */\r\n  getVersion(api_url, options) {\r\n    return this.request(api_url, 'apiinfo.version', [], options);\r\n  }\r\n}\r\n\r\n// Define zabbix API exception type\r\nexport class ZabbixAPIError {\r\n  constructor(error) {\r\n    this.code = error.code || null;\r\n    this.name = error.message || \"\";\r\n    this.data = error.data || \"\";\r\n    this.message = \"Onekeeper API Error: \" + this.name + \" \" + this.data;\r\n  }\r\n\r\n  toString() {\r\n    return this.name + \" \" + this.data;\r\n  }\r\n}\r\n\r\nangular\r\n  .module('grafana.services')\r\n  .service('zabbixAPICoreService', ZabbixAPICoreService);\r\n"]}