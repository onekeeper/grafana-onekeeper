{"version":3,"sources":["../../src/datasource-zabbix/zabbixAlerting.service.js"],"names":["_","$","angular","ZabbixAlertingService","dashboardSrv","dash","meta","fullscreen","panelId","alertState","panelIndex","panelContainers","filter","elem","clientHeight","clientWidth","panelModels","getPanelModels","isFullScreen","findIndex","panel","id","alertClass","removeClass","addClass","flatten","map","rows","row","collapse","panels","find","threshold","getPanelModel","containsThreshold","thresholds","value","type","thresholdOptions","colorMode","fill","line","lineColor","op","source","push","module","service"],"mappings":"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","file":"zabbixAlerting.service.js","sourcesContent":["import _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport angular from 'angular';\r\n\r\nclass ZabbixAlertingService {\r\n\r\n  /** @ngInject */\r\n  constructor(dashboardSrv) {\r\n    this.dashboardSrv = dashboardSrv;\r\n  }\r\n\r\n  isFullScreen() {\r\n    return this.dashboardSrv.dash.meta.fullscreen;\r\n  }\r\n\r\n  setPanelAlertState(panelId, alertState) {\r\n    let panelIndex;\r\n\r\n    let panelContainers = _.filter($('.panel-container'), elem => {\r\n      return elem.clientHeight && elem.clientWidth;\r\n    });\r\n\r\n    let panelModels = this.getPanelModels();\r\n\r\n    if (this.isFullScreen()) {\r\n      panelIndex = 0;\r\n    } else {\r\n      panelIndex = _.findIndex(panelModels, panel => {\r\n        return panel.id === panelId;\r\n      });\r\n    }\r\n\r\n    if (panelIndex >= 0) {\r\n      let alertClass = \"panel-has-alert panel-alert-state--ok panel-alert-state--alerting\";\r\n      $(panelContainers[panelIndex]).removeClass(alertClass);\r\n\r\n      if (alertState) {\r\n        if (alertState === 'alerting') {\r\n          alertClass = \"panel-has-alert panel-alert-state--\" + alertState;\r\n          $(panelContainers[panelIndex]).addClass(alertClass);\r\n        }\r\n        if (alertState === 'ok') {\r\n          alertClass = \"panel-alert-state--\" + alertState;\r\n          $(panelContainers[panelIndex]).addClass(alertClass);\r\n          $(panelContainers[panelIndex]).removeClass(\"panel-has-alert\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getPanelModels() {\r\n    return _.flatten(_.map(this.dashboardSrv.dash.rows, row => {\r\n      if (row.collapse) {\r\n        return [];\r\n      } else {\r\n        return row.panels;\r\n      }\r\n    }));\r\n  }\r\n\r\n  getPanelModel(panelId) {\r\n    let panelModels = this.getPanelModels();\r\n\r\n    return _.find(panelModels, panel => {\r\n      return panel.id === panelId;\r\n    });\r\n  }\r\n\r\n  setPanelThreshold(panelId, threshold) {\r\n    let panel = this.getPanelModel(panelId);\r\n    let containsThreshold = _.find(panel.thresholds, {value: threshold});\r\n\r\n    if (panel && panel.type === \"graph\" && !containsThreshold) {\r\n      let thresholdOptions = {\r\n        colorMode : \"custom\",\r\n        fill : false,\r\n        line : true,\r\n        lineColor: \"rgb(255, 0, 0)\",\r\n        op: \"gt\",\r\n        value: threshold,\r\n        source: \"zabbix\"\r\n      };\r\n\r\n      panel.thresholds.push(thresholdOptions);\r\n    }\r\n  }\r\n\r\n  removeZabbixThreshold(panelId) {\r\n    let panel = this.getPanelModel(panelId);\r\n\r\n    if (panel && panel.type === \"graph\") {\r\n      panel.thresholds = _.filter(panel.thresholds, threshold => {\r\n        return threshold.source !== \"zabbix\";\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\r\nangular\r\n  .module('grafana.services')\r\n  .service('zabbixAlertingSrv', ZabbixAlertingService);\r\n"]}