{"version":3,"sources":["../../src/datasource-zabbix/add-metric-function.directive.js"],"names":["getAllFunctionNames","categories","_","reduce","list","category","each","func","push","name","createFunctionDropDownMenu","map","text","submenu","value","click","angular","$","metricFunctions","module","directive","$compile","inputTemplate","buttonTemplate","link","$scope","elem","getCategories","allFunctions","functionMenu","$input","$button","appendTo","attr","typeahead","source","minLength","items","updater","funcDef","getFuncDef","toLowerCase","find","funcName","indexOf","$apply","addFunction","trigger","hide","show","focus","keyup","toggleClass","val","blur","setTimeout","removeClass","contents"],"mappings":"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","file":"add-metric-function.directive.js","sourcesContent":["import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport * as metricFunctions from './metricFunctions';\r\n\r\n/** @ngInject */\r\nangular\r\n  .module('grafana.directives')\r\n  .directive('addMetricFunction', function($compile) {\r\n    var inputTemplate = '<input type=\"text\"'+\r\n                          ' class=\"gf-form-input\"' +\r\n                          ' spellcheck=\"false\" style=\"display:none\"></input>';\r\n\r\n    var buttonTemplate = '<a  class=\"gf-form-label tight-form-func dropdown-toggle query-part\"' +\r\n                            ' tabindex=\"1\" gf-dropdown=\"functionMenu\" data-toggle=\"dropdown\">' +\r\n                            '<i class=\"fa fa-plus\"></i></a>';\r\n\r\n    return {\r\n      link: function($scope, elem) {\r\n        var categories = metricFunctions.getCategories();\r\n        var allFunctions = getAllFunctionNames(categories);\r\n\r\n        $scope.functionMenu = createFunctionDropDownMenu(categories);\r\n\r\n        var $input = $(inputTemplate);\r\n        var $button = $(buttonTemplate);\r\n        $input.appendTo(elem);\r\n        $button.appendTo(elem);\r\n\r\n        $input.attr('data-provide', 'typeahead');\r\n        $input.typeahead({\r\n          source: allFunctions,\r\n          minLength: 1,\r\n          items: 10,\r\n          updater: function (value) {\r\n            var funcDef = metricFunctions.getFuncDef(value);\r\n            if (!funcDef) {\r\n              // try find close match\r\n              value = value.toLowerCase();\r\n              funcDef = _.find(allFunctions, function(funcName) {\r\n                return funcName.toLowerCase().indexOf(value) === 0;\r\n              });\r\n\r\n              if (!funcDef) { return; }\r\n            }\r\n\r\n            $scope.$apply(function() {\r\n              $scope.addFunction(funcDef);\r\n            });\r\n\r\n            $input.trigger('blur');\r\n            return '';\r\n          }\r\n        });\r\n\r\n        $button.click(function() {\r\n          $button.hide();\r\n          $input.show();\r\n          $input.focus();\r\n        });\r\n\r\n        $input.keyup(function() {\r\n          elem.toggleClass('open', $input.val() === '');\r\n        });\r\n\r\n        $input.blur(function() {\r\n          // clicking the function dropdown menu wont\r\n          // work if you remove class at once\r\n          setTimeout(function() {\r\n            $input.val('');\r\n            $input.hide();\r\n            $button.show();\r\n            elem.removeClass('open');\r\n          }, 200);\r\n        });\r\n\r\n        $compile(elem.contents())($scope);\r\n      }\r\n    };\r\n  });\r\n\r\nfunction getAllFunctionNames(categories) {\r\n  return _.reduce(categories, function(list, category) {\r\n    _.each(category, function(func) {\r\n      list.push(func.name);\r\n    });\r\n    return list;\r\n  }, []);\r\n}\r\n\r\nfunction createFunctionDropDownMenu(categories) {\r\n  return _.map(categories, function(list, category) {\r\n    return {\r\n      text: category,\r\n      submenu: _.map(list, function(value) {\r\n        return {\r\n          text: value.name,\r\n          click: \"ctrl.addFunction('\" + value.name + \"')\",\r\n        };\r\n      })\r\n    };\r\n  });\r\n}\r\n\r\n"]}